
Simple_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00002f58  00002fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080009a  0080009a  00003026  2**0
                  ALLOC
  3 .stab         000023ac  00000000  00000000  00003028  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c72  00000000  00000000  000053d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006046  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006186  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000062f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a793  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <main>
      8a:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e9       	ldi	r26, 0x90	; 144
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e9       	ldi	r24, 0x90	; 144
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	60 97       	sbiw	r28, 0x10	; 16
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	62 e0       	ldi	r22, 0x02	; 2
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	63 e0       	ldi	r22, 0x03	; 3
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	64 e0       	ldi	r22, 0x04	; 4
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	65 e0       	ldi	r22, 0x05	; 5
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	66 e0       	ldi	r22, 0x06	; 6
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	67 e0       	ldi	r22, 0x07	; 7
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     baa:	1f 86       	std	Y+15, r1	; 0x0f
     bac:	ab c0       	rjmp	.+342    	; 0xd04 <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	6f 85       	ldd	r22, Y+15	; 0x0f
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	6f 85       	ldd	r22, Y+15	; 0x0f
     bbc:	40 e0       	ldi	r20, 0x00	; 0
     bbe:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     bc2:	18 8a       	std	Y+16, r1	; 0x10
     bc4:	22 c0       	rjmp	.+68     	; 0xc0a <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
     bc6:	88 89       	ldd	r24, Y+16	; 0x10
     bc8:	98 2f       	mov	r25, r24
     bca:	9c 5f       	subi	r25, 0xFC	; 252
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	69 2f       	mov	r22, r25
     bd0:	0e 94 5d 13 	call	0x26ba	; 0x26ba <GPIO_readPin>
     bd4:	88 23       	and	r24, r24
     bd6:	b1 f4       	brne	.+44     	; 0xc04 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     bd8:	8f 85       	ldd	r24, Y+15	; 0x0f
     bda:	88 2f       	mov	r24, r24
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	98 2f       	mov	r25, r24
     be8:	88 89       	ldd	r24, Y+16	; 0x10
     bea:	89 0f       	add	r24, r25
     bec:	8f 5f       	subi	r24, 0xFF	; 255
     bee:	0e 94 87 06 	call	0xd0e	; 0xd0e <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
     bf2:	60 96       	adiw	r28, 0x10	; 16
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	cd bf       	out	0x3d, r28	; 61
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     c04:	88 89       	ldd	r24, Y+16	; 0x10
     c06:	8f 5f       	subi	r24, 0xFF	; 255
     c08:	88 8b       	std	Y+16, r24	; 0x10
     c0a:	88 89       	ldd	r24, Y+16	; 0x10
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	d8 f2       	brcs	.-74     	; 0xbc6 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	6f 85       	ldd	r22, Y+15	; 0x0f
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 ea       	ldi	r26, 0xA0	; 160
     c20:	b0 e4       	ldi	r27, 0x40	; 64
     c22:	8b 87       	std	Y+11, r24	; 0x0b
     c24:	9c 87       	std	Y+12, r25	; 0x0c
     c26:	ad 87       	std	Y+13, r26	; 0x0d
     c28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c30:	9e 85       	ldd	r25, Y+14	; 0x0e
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	4a e7       	ldi	r20, 0x7A	; 122
     c38:	53 e4       	ldi	r21, 0x43	; 67
     c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	8f 83       	std	Y+7, r24	; 0x07
     c44:	98 87       	std	Y+8, r25	; 0x08
     c46:	a9 87       	std	Y+9, r26	; 0x09
     c48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c4a:	6f 81       	ldd	r22, Y+7	; 0x07
     c4c:	78 85       	ldd	r23, Y+8	; 0x08
     c4e:	89 85       	ldd	r24, Y+9	; 0x09
     c50:	9a 85       	ldd	r25, Y+10	; 0x0a
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	40 e8       	ldi	r20, 0x80	; 128
     c58:	5f e3       	ldi	r21, 0x3F	; 63
     c5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c5e:	88 23       	and	r24, r24
     c60:	2c f4       	brge	.+10     	; 0xc6c <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	9e 83       	std	Y+6, r25	; 0x06
     c68:	8d 83       	std	Y+5, r24	; 0x05
     c6a:	3f c0       	rjmp	.+126    	; 0xcea <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
     c6c:	6f 81       	ldd	r22, Y+7	; 0x07
     c6e:	78 85       	ldd	r23, Y+8	; 0x08
     c70:	89 85       	ldd	r24, Y+9	; 0x09
     c72:	9a 85       	ldd	r25, Y+10	; 0x0a
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	3f ef       	ldi	r19, 0xFF	; 255
     c78:	4f e7       	ldi	r20, 0x7F	; 127
     c7a:	57 e4       	ldi	r21, 0x47	; 71
     c7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c80:	18 16       	cp	r1, r24
     c82:	4c f5       	brge	.+82     	; 0xcd6 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c84:	6b 85       	ldd	r22, Y+11	; 0x0b
     c86:	7c 85       	ldd	r23, Y+12	; 0x0c
     c88:	8d 85       	ldd	r24, Y+13	; 0x0d
     c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	40 e2       	ldi	r20, 0x20	; 32
     c92:	51 e4       	ldi	r21, 0x41	; 65
     c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c98:	dc 01       	movw	r26, r24
     c9a:	cb 01       	movw	r24, r22
     c9c:	bc 01       	movw	r22, r24
     c9e:	cd 01       	movw	r24, r26
     ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	9e 83       	std	Y+6, r25	; 0x06
     caa:	8d 83       	std	Y+5, r24	; 0x05
     cac:	0f c0       	rjmp	.+30     	; 0xccc <KEYPAD_getPressedKey+0x186>
     cae:	89 e1       	ldi	r24, 0x19	; 25
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	9c 83       	std	Y+4, r25	; 0x04
     cb4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	9c 81       	ldd	r25, Y+4	; 0x04
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	f1 f7       	brne	.-4      	; 0xcba <KEYPAD_getPressedKey+0x174>
     cbe:	9c 83       	std	Y+4, r25	; 0x04
     cc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc2:	8d 81       	ldd	r24, Y+5	; 0x05
     cc4:	9e 81       	ldd	r25, Y+6	; 0x06
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	9e 83       	std	Y+6, r25	; 0x06
     cca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	9e 81       	ldd	r25, Y+6	; 0x06
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	69 f7       	brne	.-38     	; 0xcae <KEYPAD_getPressedKey+0x168>
     cd4:	14 c0       	rjmp	.+40     	; 0xcfe <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd6:	6f 81       	ldd	r22, Y+7	; 0x07
     cd8:	78 85       	ldd	r23, Y+8	; 0x08
     cda:	89 85       	ldd	r24, Y+9	; 0x09
     cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	9e 83       	std	Y+6, r25	; 0x06
     ce8:	8d 83       	std	Y+5, r24	; 0x05
     cea:	8d 81       	ldd	r24, Y+5	; 0x05
     cec:	9e 81       	ldd	r25, Y+6	; 0x06
     cee:	9a 83       	std	Y+2, r25	; 0x02
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	9a 81       	ldd	r25, Y+2	; 0x02
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <KEYPAD_getPressedKey+0x1b0>
     cfa:	9a 83       	std	Y+2, r25	; 0x02
     cfc:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	8f 87       	std	Y+15, r24	; 0x0f
     d04:	8f 85       	ldd	r24, Y+15	; 0x0f
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	08 f4       	brcc	.+2      	; 0xd0c <KEYPAD_getPressedKey+0x1c6>
     d0a:	51 cf       	rjmp	.-350    	; 0xbae <KEYPAD_getPressedKey+0x68>
     d0c:	4e cf       	rjmp	.-356    	; 0xbaa <KEYPAD_getPressedKey+0x64>

00000d0e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <KEYPAD_4x4_adjustKeyNumber+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <KEYPAD_4x4_adjustKeyNumber+0x8>
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
     d1c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	3c 83       	std	Y+4, r19	; 0x04
     d26:	2b 83       	std	Y+3, r18	; 0x03
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	9c 81       	ldd	r25, Y+4	; 0x04
     d2c:	88 30       	cpi	r24, 0x08	; 8
     d2e:	91 05       	cpc	r25, r1
     d30:	09 f4       	brne	.+2      	; 0xd34 <KEYPAD_4x4_adjustKeyNumber+0x26>
     d32:	70 c0       	rjmp	.+224    	; 0xe14 <KEYPAD_4x4_adjustKeyNumber+0x106>
     d34:	2b 81       	ldd	r18, Y+3	; 0x03
     d36:	3c 81       	ldd	r19, Y+4	; 0x04
     d38:	29 30       	cpi	r18, 0x09	; 9
     d3a:	31 05       	cpc	r19, r1
     d3c:	5c f5       	brge	.+86     	; 0xd94 <KEYPAD_4x4_adjustKeyNumber+0x86>
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	9c 81       	ldd	r25, Y+4	; 0x04
     d42:	84 30       	cpi	r24, 0x04	; 4
     d44:	91 05       	cpc	r25, r1
     d46:	09 f4       	brne	.+2      	; 0xd4a <KEYPAD_4x4_adjustKeyNumber+0x3c>
     d48:	59 c0       	rjmp	.+178    	; 0xdfc <KEYPAD_4x4_adjustKeyNumber+0xee>
     d4a:	2b 81       	ldd	r18, Y+3	; 0x03
     d4c:	3c 81       	ldd	r19, Y+4	; 0x04
     d4e:	25 30       	cpi	r18, 0x05	; 5
     d50:	31 05       	cpc	r19, r1
     d52:	9c f4       	brge	.+38     	; 0xd7a <KEYPAD_4x4_adjustKeyNumber+0x6c>
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	9c 81       	ldd	r25, Y+4	; 0x04
     d58:	82 30       	cpi	r24, 0x02	; 2
     d5a:	91 05       	cpc	r25, r1
     d5c:	09 f4       	brne	.+2      	; 0xd60 <KEYPAD_4x4_adjustKeyNumber+0x52>
     d5e:	48 c0       	rjmp	.+144    	; 0xdf0 <KEYPAD_4x4_adjustKeyNumber+0xe2>
     d60:	2b 81       	ldd	r18, Y+3	; 0x03
     d62:	3c 81       	ldd	r19, Y+4	; 0x04
     d64:	23 30       	cpi	r18, 0x03	; 3
     d66:	31 05       	cpc	r19, r1
     d68:	0c f0       	brlt	.+2      	; 0xd6c <KEYPAD_4x4_adjustKeyNumber+0x5e>
     d6a:	45 c0       	rjmp	.+138    	; 0xdf6 <KEYPAD_4x4_adjustKeyNumber+0xe8>
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	91 05       	cpc	r25, r1
     d74:	09 f4       	brne	.+2      	; 0xd78 <KEYPAD_4x4_adjustKeyNumber+0x6a>
     d76:	39 c0       	rjmp	.+114    	; 0xdea <KEYPAD_4x4_adjustKeyNumber+0xdc>
     d78:	67 c0       	rjmp	.+206    	; 0xe48 <KEYPAD_4x4_adjustKeyNumber+0x13a>
     d7a:	2b 81       	ldd	r18, Y+3	; 0x03
     d7c:	3c 81       	ldd	r19, Y+4	; 0x04
     d7e:	26 30       	cpi	r18, 0x06	; 6
     d80:	31 05       	cpc	r19, r1
     d82:	09 f4       	brne	.+2      	; 0xd86 <KEYPAD_4x4_adjustKeyNumber+0x78>
     d84:	41 c0       	rjmp	.+130    	; 0xe08 <KEYPAD_4x4_adjustKeyNumber+0xfa>
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
     d8a:	87 30       	cpi	r24, 0x07	; 7
     d8c:	91 05       	cpc	r25, r1
     d8e:	0c f0       	brlt	.+2      	; 0xd92 <KEYPAD_4x4_adjustKeyNumber+0x84>
     d90:	3e c0       	rjmp	.+124    	; 0xe0e <KEYPAD_4x4_adjustKeyNumber+0x100>
     d92:	37 c0       	rjmp	.+110    	; 0xe02 <KEYPAD_4x4_adjustKeyNumber+0xf4>
     d94:	2b 81       	ldd	r18, Y+3	; 0x03
     d96:	3c 81       	ldd	r19, Y+4	; 0x04
     d98:	2c 30       	cpi	r18, 0x0C	; 12
     d9a:	31 05       	cpc	r19, r1
     d9c:	09 f4       	brne	.+2      	; 0xda0 <KEYPAD_4x4_adjustKeyNumber+0x92>
     d9e:	46 c0       	rjmp	.+140    	; 0xe2c <KEYPAD_4x4_adjustKeyNumber+0x11e>
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	9c 81       	ldd	r25, Y+4	; 0x04
     da4:	8d 30       	cpi	r24, 0x0D	; 13
     da6:	91 05       	cpc	r25, r1
     da8:	5c f4       	brge	.+22     	; 0xdc0 <KEYPAD_4x4_adjustKeyNumber+0xb2>
     daa:	2b 81       	ldd	r18, Y+3	; 0x03
     dac:	3c 81       	ldd	r19, Y+4	; 0x04
     dae:	2a 30       	cpi	r18, 0x0A	; 10
     db0:	31 05       	cpc	r19, r1
     db2:	b1 f1       	breq	.+108    	; 0xe20 <KEYPAD_4x4_adjustKeyNumber+0x112>
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	9c 81       	ldd	r25, Y+4	; 0x04
     db8:	8b 30       	cpi	r24, 0x0B	; 11
     dba:	91 05       	cpc	r25, r1
     dbc:	a4 f5       	brge	.+104    	; 0xe26 <KEYPAD_4x4_adjustKeyNumber+0x118>
     dbe:	2d c0       	rjmp	.+90     	; 0xe1a <KEYPAD_4x4_adjustKeyNumber+0x10c>
     dc0:	2b 81       	ldd	r18, Y+3	; 0x03
     dc2:	3c 81       	ldd	r19, Y+4	; 0x04
     dc4:	2e 30       	cpi	r18, 0x0E	; 14
     dc6:	31 05       	cpc	r19, r1
     dc8:	b9 f1       	breq	.+110    	; 0xe38 <KEYPAD_4x4_adjustKeyNumber+0x12a>
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	9c 81       	ldd	r25, Y+4	; 0x04
     dce:	8e 30       	cpi	r24, 0x0E	; 14
     dd0:	91 05       	cpc	r25, r1
     dd2:	7c f1       	brlt	.+94     	; 0xe32 <KEYPAD_4x4_adjustKeyNumber+0x124>
     dd4:	2b 81       	ldd	r18, Y+3	; 0x03
     dd6:	3c 81       	ldd	r19, Y+4	; 0x04
     dd8:	2f 30       	cpi	r18, 0x0F	; 15
     dda:	31 05       	cpc	r19, r1
     ddc:	79 f1       	breq	.+94     	; 0xe3c <KEYPAD_4x4_adjustKeyNumber+0x12e>
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	9c 81       	ldd	r25, Y+4	; 0x04
     de2:	80 31       	cpi	r24, 0x10	; 16
     de4:	91 05       	cpc	r25, r1
     de6:	69 f1       	breq	.+90     	; 0xe42 <KEYPAD_4x4_adjustKeyNumber+0x134>
     de8:	2f c0       	rjmp	.+94     	; 0xe48 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
     dea:	87 e0       	ldi	r24, 0x07	; 7
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	2e c0       	rjmp	.+92     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
     df0:	88 e0       	ldi	r24, 0x08	; 8
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	2b c0       	rjmp	.+86     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
     df6:	89 e0       	ldi	r24, 0x09	; 9
     df8:	89 83       	std	Y+1, r24	; 0x01
     dfa:	28 c0       	rjmp	.+80     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
     dfc:	85 e2       	ldi	r24, 0x25	; 37
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	25 c0       	rjmp	.+74     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
     e02:	84 e0       	ldi	r24, 0x04	; 4
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	22 c0       	rjmp	.+68     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
     e08:	85 e0       	ldi	r24, 0x05	; 5
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	1f c0       	rjmp	.+62     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
     e0e:	86 e0       	ldi	r24, 0x06	; 6
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	1c c0       	rjmp	.+56     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
     e14:	8a e2       	ldi	r24, 0x2A	; 42
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	19 c0       	rjmp	.+50     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	16 c0       	rjmp	.+44     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	13 c0       	rjmp	.+38     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
     e26:	83 e0       	ldi	r24, 0x03	; 3
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	10 c0       	rjmp	.+32     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
     e2c:	8d e2       	ldi	r24, 0x2D	; 45
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	0d c0       	rjmp	.+26     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
     e32:	8d e0       	ldi	r24, 0x0D	; 13
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	0a c0       	rjmp	.+20     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
     e38:	19 82       	std	Y+1, r1	; 0x01
     e3a:	08 c0       	rjmp	.+16     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
     e3c:	8d e3       	ldi	r24, 0x3D	; 61
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	05 c0       	rjmp	.+10     	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
     e42:	8b e2       	ldi	r24, 0x2B	; 43
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	2e 97       	sbiw	r28, 0x0e	; 14
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	41 e0       	ldi	r20, 0x01	; 1
     e76:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	62 e0       	ldi	r22, 0x02	; 2
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	a0 ea       	ldi	r26, 0xA0	; 160
     e8a:	b1 e4       	ldi	r27, 0x41	; 65
     e8c:	8b 87       	std	Y+11, r24	; 0x0b
     e8e:	9c 87       	std	Y+12, r25	; 0x0c
     e90:	ad 87       	std	Y+13, r26	; 0x0d
     e92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e94:	6b 85       	ldd	r22, Y+11	; 0x0b
     e96:	7c 85       	ldd	r23, Y+12	; 0x0c
     e98:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	4a e7       	ldi	r20, 0x7A	; 122
     ea2:	53 e4       	ldi	r21, 0x43	; 67
     ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	8f 83       	std	Y+7, r24	; 0x07
     eae:	98 87       	std	Y+8, r25	; 0x08
     eb0:	a9 87       	std	Y+9, r26	; 0x09
     eb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb4:	6f 81       	ldd	r22, Y+7	; 0x07
     eb6:	78 85       	ldd	r23, Y+8	; 0x08
     eb8:	89 85       	ldd	r24, Y+9	; 0x09
     eba:	9a 85       	ldd	r25, Y+10	; 0x0a
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e8       	ldi	r20, 0x80	; 128
     ec2:	5f e3       	ldi	r21, 0x3F	; 63
     ec4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec8:	88 23       	and	r24, r24
     eca:	2c f4       	brge	.+10     	; 0xed6 <LCD_init+0x7a>
		__ticks = 1;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9e 83       	std	Y+6, r25	; 0x06
     ed2:	8d 83       	std	Y+5, r24	; 0x05
     ed4:	3f c0       	rjmp	.+126    	; 0xf54 <LCD_init+0xf8>
	else if (__tmp > 65535)
     ed6:	6f 81       	ldd	r22, Y+7	; 0x07
     ed8:	78 85       	ldd	r23, Y+8	; 0x08
     eda:	89 85       	ldd	r24, Y+9	; 0x09
     edc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	3f ef       	ldi	r19, 0xFF	; 255
     ee2:	4f e7       	ldi	r20, 0x7F	; 127
     ee4:	57 e4       	ldi	r21, 0x47	; 71
     ee6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eea:	18 16       	cp	r1, r24
     eec:	4c f5       	brge	.+82     	; 0xf40 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eee:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e2       	ldi	r20, 0x20	; 32
     efc:	51 e4       	ldi	r21, 0x41	; 65
     efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	bc 01       	movw	r22, r24
     f08:	cd 01       	movw	r24, r26
     f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	9e 83       	std	Y+6, r25	; 0x06
     f14:	8d 83       	std	Y+5, r24	; 0x05
     f16:	0f c0       	rjmp	.+30     	; 0xf36 <LCD_init+0xda>
     f18:	89 e1       	ldi	r24, 0x19	; 25
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9c 83       	std	Y+4, r25	; 0x04
     f1e:	8b 83       	std	Y+3, r24	; 0x03
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	f1 f7       	brne	.-4      	; 0xf24 <LCD_init+0xc8>
     f28:	9c 83       	std	Y+4, r25	; 0x04
     f2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2c:	8d 81       	ldd	r24, Y+5	; 0x05
     f2e:	9e 81       	ldd	r25, Y+6	; 0x06
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f36:	8d 81       	ldd	r24, Y+5	; 0x05
     f38:	9e 81       	ldd	r25, Y+6	; 0x06
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	69 f7       	brne	.-38     	; 0xf18 <LCD_init+0xbc>
     f3e:	14 c0       	rjmp	.+40     	; 0xf68 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f40:	6f 81       	ldd	r22, Y+7	; 0x07
     f42:	78 85       	ldd	r23, Y+8	; 0x08
     f44:	89 85       	ldd	r24, Y+9	; 0x09
     f46:	9a 85       	ldd	r25, Y+10	; 0x0a
     f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	9e 83       	std	Y+6, r25	; 0x06
     f52:	8d 83       	std	Y+5, r24	; 0x05
     f54:	8d 81       	ldd	r24, Y+5	; 0x05
     f56:	9e 81       	ldd	r25, Y+6	; 0x06
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <LCD_init+0x104>
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
     f68:	83 e0       	ldi	r24, 0x03	; 3
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	41 e0       	ldi	r20, 0x01	; 1
     f6e:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
     f72:	83 e0       	ldi	r24, 0x03	; 3
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
     f7c:	83 e0       	ldi	r24, 0x03	; 3
     f7e:	62 e0       	ldi	r22, 0x02	; 2
     f80:	41 e0       	ldi	r20, 0x01	; 1
     f82:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
     f86:	83 e0       	ldi	r24, 0x03	; 3
     f88:	63 e0       	ldi	r22, 0x03	; 3
     f8a:	41 e0       	ldi	r20, 0x01	; 1
     f8c:	0e 94 87 11 	call	0x230e	; 0x230e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
     f90:	83 e3       	ldi	r24, 0x33	; 51
     f92:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
     f96:	82 e3       	ldi	r24, 0x32	; 50
     f98:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
     f9c:	88 e2       	ldi	r24, 0x28	; 40
     f9e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     fa2:	8c e0       	ldi	r24, 0x0C	; 12
     fa4:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <LCD_sendCommand>
}
     fae:	2e 96       	adiw	r28, 0x0e	; 14
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	c3 56       	subi	r28, 0x63	; 99
     fce:	d0 40       	sbci	r29, 0x00	; 0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	fe 01       	movw	r30, r28
     fdc:	ed 59       	subi	r30, 0x9D	; 157
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	61 e0       	ldi	r22, 0x01	; 1
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
     fec:	fe 01       	movw	r30, r28
     fee:	e1 5a       	subi	r30, 0xA1	; 161
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a0 e8       	ldi	r26, 0x80	; 128
     ff8:	bf e3       	ldi	r27, 0x3F	; 63
     ffa:	80 83       	st	Z, r24
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	a2 83       	std	Z+2, r26	; 0x02
    1000:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1002:	8e 01       	movw	r16, r28
    1004:	05 5a       	subi	r16, 0xA5	; 165
    1006:	1f 4f       	sbci	r17, 0xFF	; 255
    1008:	fe 01       	movw	r30, r28
    100a:	e1 5a       	subi	r30, 0xA1	; 161
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	60 81       	ld	r22, Z
    1010:	71 81       	ldd	r23, Z+1	; 0x01
    1012:	82 81       	ldd	r24, Z+2	; 0x02
    1014:	93 81       	ldd	r25, Z+3	; 0x03
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	4a e7       	ldi	r20, 0x7A	; 122
    101c:	53 e4       	ldi	r21, 0x43	; 67
    101e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	f8 01       	movw	r30, r16
    1028:	80 83       	st	Z, r24
    102a:	91 83       	std	Z+1, r25	; 0x01
    102c:	a2 83       	std	Z+2, r26	; 0x02
    102e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1030:	fe 01       	movw	r30, r28
    1032:	e5 5a       	subi	r30, 0xA5	; 165
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	60 81       	ld	r22, Z
    1038:	71 81       	ldd	r23, Z+1	; 0x01
    103a:	82 81       	ldd	r24, Z+2	; 0x02
    103c:	93 81       	ldd	r25, Z+3	; 0x03
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e8       	ldi	r20, 0x80	; 128
    1044:	5f e3       	ldi	r21, 0x3F	; 63
    1046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    104a:	88 23       	and	r24, r24
    104c:	44 f4       	brge	.+16     	; 0x105e <LCD_sendCommand+0x9e>
		__ticks = 1;
    104e:	fe 01       	movw	r30, r28
    1050:	e7 5a       	subi	r30, 0xA7	; 167
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	91 83       	std	Z+1, r25	; 0x01
    105a:	80 83       	st	Z, r24
    105c:	64 c0       	rjmp	.+200    	; 0x1126 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    105e:	fe 01       	movw	r30, r28
    1060:	e5 5a       	subi	r30, 0xA5	; 165
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	60 81       	ld	r22, Z
    1066:	71 81       	ldd	r23, Z+1	; 0x01
    1068:	82 81       	ldd	r24, Z+2	; 0x02
    106a:	93 81       	ldd	r25, Z+3	; 0x03
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	3f ef       	ldi	r19, 0xFF	; 255
    1070:	4f e7       	ldi	r20, 0x7F	; 127
    1072:	57 e4       	ldi	r21, 0x47	; 71
    1074:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1078:	18 16       	cp	r1, r24
    107a:	0c f0       	brlt	.+2      	; 0x107e <LCD_sendCommand+0xbe>
    107c:	43 c0       	rjmp	.+134    	; 0x1104 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    107e:	fe 01       	movw	r30, r28
    1080:	e1 5a       	subi	r30, 0xA1	; 161
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	93 81       	ldd	r25, Z+3	; 0x03
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 e2       	ldi	r20, 0x20	; 32
    1092:	51 e4       	ldi	r21, 0x41	; 65
    1094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	8e 01       	movw	r16, r28
    109e:	07 5a       	subi	r16, 0xA7	; 167
    10a0:	1f 4f       	sbci	r17, 0xFF	; 255
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	f8 01       	movw	r30, r16
    10b0:	91 83       	std	Z+1, r25	; 0x01
    10b2:	80 83       	st	Z, r24
    10b4:	1f c0       	rjmp	.+62     	; 0x10f4 <LCD_sendCommand+0x134>
    10b6:	fe 01       	movw	r30, r28
    10b8:	e9 5a       	subi	r30, 0xA9	; 169
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	89 e1       	ldi	r24, 0x19	; 25
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	80 83       	st	Z, r24
    10c4:	fe 01       	movw	r30, r28
    10c6:	e9 5a       	subi	r30, 0xA9	; 169
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	80 81       	ld	r24, Z
    10cc:	91 81       	ldd	r25, Z+1	; 0x01
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <LCD_sendCommand+0x10e>
    10d2:	fe 01       	movw	r30, r28
    10d4:	e9 5a       	subi	r30, 0xA9	; 169
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	91 83       	std	Z+1, r25	; 0x01
    10da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10dc:	de 01       	movw	r26, r28
    10de:	a7 5a       	subi	r26, 0xA7	; 167
    10e0:	bf 4f       	sbci	r27, 0xFF	; 255
    10e2:	fe 01       	movw	r30, r28
    10e4:	e7 5a       	subi	r30, 0xA7	; 167
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	80 81       	ld	r24, Z
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	11 96       	adiw	r26, 0x01	; 1
    10f0:	9c 93       	st	X, r25
    10f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f4:	fe 01       	movw	r30, r28
    10f6:	e7 5a       	subi	r30, 0xA7	; 167
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	80 81       	ld	r24, Z
    10fc:	91 81       	ldd	r25, Z+1	; 0x01
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	d1 f6       	brne	.-76     	; 0x10b6 <LCD_sendCommand+0xf6>
    1102:	27 c0       	rjmp	.+78     	; 0x1152 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1104:	8e 01       	movw	r16, r28
    1106:	07 5a       	subi	r16, 0xA7	; 167
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	fe 01       	movw	r30, r28
    110c:	e5 5a       	subi	r30, 0xA5	; 165
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	60 81       	ld	r22, Z
    1112:	71 81       	ldd	r23, Z+1	; 0x01
    1114:	82 81       	ldd	r24, Z+2	; 0x02
    1116:	93 81       	ldd	r25, Z+3	; 0x03
    1118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	f8 01       	movw	r30, r16
    1122:	91 83       	std	Z+1, r25	; 0x01
    1124:	80 83       	st	Z, r24
    1126:	de 01       	movw	r26, r28
    1128:	ab 5a       	subi	r26, 0xAB	; 171
    112a:	bf 4f       	sbci	r27, 0xFF	; 255
    112c:	fe 01       	movw	r30, r28
    112e:	e7 5a       	subi	r30, 0xA7	; 167
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	8d 93       	st	X+, r24
    1138:	9c 93       	st	X, r25
    113a:	fe 01       	movw	r30, r28
    113c:	eb 5a       	subi	r30, 0xAB	; 171
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <LCD_sendCommand+0x184>
    1148:	fe 01       	movw	r30, r28
    114a:	eb 5a       	subi	r30, 0xAB	; 171
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	91 83       	std	Z+1, r25	; 0x01
    1150:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	62 e0       	ldi	r22, 0x02	; 2
    1156:	41 e0       	ldi	r20, 0x01	; 1
    1158:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
    115c:	fe 01       	movw	r30, r28
    115e:	ef 5a       	subi	r30, 0xAF	; 175
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	a0 e8       	ldi	r26, 0x80	; 128
    1168:	bf e3       	ldi	r27, 0x3F	; 63
    116a:	80 83       	st	Z, r24
    116c:	91 83       	std	Z+1, r25	; 0x01
    116e:	a2 83       	std	Z+2, r26	; 0x02
    1170:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1172:	8e 01       	movw	r16, r28
    1174:	03 5b       	subi	r16, 0xB3	; 179
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	fe 01       	movw	r30, r28
    117a:	ef 5a       	subi	r30, 0xAF	; 175
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	60 81       	ld	r22, Z
    1180:	71 81       	ldd	r23, Z+1	; 0x01
    1182:	82 81       	ldd	r24, Z+2	; 0x02
    1184:	93 81       	ldd	r25, Z+3	; 0x03
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	4a e7       	ldi	r20, 0x7A	; 122
    118c:	53 e4       	ldi	r21, 0x43	; 67
    118e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	f8 01       	movw	r30, r16
    1198:	80 83       	st	Z, r24
    119a:	91 83       	std	Z+1, r25	; 0x01
    119c:	a2 83       	std	Z+2, r26	; 0x02
    119e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11a0:	fe 01       	movw	r30, r28
    11a2:	e3 5b       	subi	r30, 0xB3	; 179
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	60 81       	ld	r22, Z
    11a8:	71 81       	ldd	r23, Z+1	; 0x01
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	93 81       	ldd	r25, Z+3	; 0x03
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e8       	ldi	r20, 0x80	; 128
    11b4:	5f e3       	ldi	r21, 0x3F	; 63
    11b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ba:	88 23       	and	r24, r24
    11bc:	44 f4       	brge	.+16     	; 0x11ce <LCD_sendCommand+0x20e>
		__ticks = 1;
    11be:	fe 01       	movw	r30, r28
    11c0:	e5 5b       	subi	r30, 0xB5	; 181
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	91 83       	std	Z+1, r25	; 0x01
    11ca:	80 83       	st	Z, r24
    11cc:	64 c0       	rjmp	.+200    	; 0x1296 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    11ce:	fe 01       	movw	r30, r28
    11d0:	e3 5b       	subi	r30, 0xB3	; 179
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	3f ef       	ldi	r19, 0xFF	; 255
    11e0:	4f e7       	ldi	r20, 0x7F	; 127
    11e2:	57 e4       	ldi	r21, 0x47	; 71
    11e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e8:	18 16       	cp	r1, r24
    11ea:	0c f0       	brlt	.+2      	; 0x11ee <LCD_sendCommand+0x22e>
    11ec:	43 c0       	rjmp	.+134    	; 0x1274 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ee:	fe 01       	movw	r30, r28
    11f0:	ef 5a       	subi	r30, 0xAF	; 175
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	60 81       	ld	r22, Z
    11f6:	71 81       	ldd	r23, Z+1	; 0x01
    11f8:	82 81       	ldd	r24, Z+2	; 0x02
    11fa:	93 81       	ldd	r25, Z+3	; 0x03
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e2       	ldi	r20, 0x20	; 32
    1202:	51 e4       	ldi	r21, 0x41	; 65
    1204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	8e 01       	movw	r16, r28
    120e:	05 5b       	subi	r16, 0xB5	; 181
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	bc 01       	movw	r22, r24
    1214:	cd 01       	movw	r24, r26
    1216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	f8 01       	movw	r30, r16
    1220:	91 83       	std	Z+1, r25	; 0x01
    1222:	80 83       	st	Z, r24
    1224:	1f c0       	rjmp	.+62     	; 0x1264 <LCD_sendCommand+0x2a4>
    1226:	fe 01       	movw	r30, r28
    1228:	e7 5b       	subi	r30, 0xB7	; 183
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	89 e1       	ldi	r24, 0x19	; 25
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	91 83       	std	Z+1, r25	; 0x01
    1232:	80 83       	st	Z, r24
    1234:	fe 01       	movw	r30, r28
    1236:	e7 5b       	subi	r30, 0xB7	; 183
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	80 81       	ld	r24, Z
    123c:	91 81       	ldd	r25, Z+1	; 0x01
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <LCD_sendCommand+0x27e>
    1242:	fe 01       	movw	r30, r28
    1244:	e7 5b       	subi	r30, 0xB7	; 183
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	91 83       	std	Z+1, r25	; 0x01
    124a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124c:	de 01       	movw	r26, r28
    124e:	a5 5b       	subi	r26, 0xB5	; 181
    1250:	bf 4f       	sbci	r27, 0xFF	; 255
    1252:	fe 01       	movw	r30, r28
    1254:	e5 5b       	subi	r30, 0xB5	; 181
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	80 81       	ld	r24, Z
    125a:	91 81       	ldd	r25, Z+1	; 0x01
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	11 96       	adiw	r26, 0x01	; 1
    1260:	9c 93       	st	X, r25
    1262:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1264:	fe 01       	movw	r30, r28
    1266:	e5 5b       	subi	r30, 0xB5	; 181
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	80 81       	ld	r24, Z
    126c:	91 81       	ldd	r25, Z+1	; 0x01
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	d1 f6       	brne	.-76     	; 0x1226 <LCD_sendCommand+0x266>
    1272:	27 c0       	rjmp	.+78     	; 0x12c2 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1274:	8e 01       	movw	r16, r28
    1276:	05 5b       	subi	r16, 0xB5	; 181
    1278:	1f 4f       	sbci	r17, 0xFF	; 255
    127a:	fe 01       	movw	r30, r28
    127c:	e3 5b       	subi	r30, 0xB3	; 179
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	60 81       	ld	r22, Z
    1282:	71 81       	ldd	r23, Z+1	; 0x01
    1284:	82 81       	ldd	r24, Z+2	; 0x02
    1286:	93 81       	ldd	r25, Z+3	; 0x03
    1288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	f8 01       	movw	r30, r16
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	80 83       	st	Z, r24
    1296:	de 01       	movw	r26, r28
    1298:	a9 5b       	subi	r26, 0xB9	; 185
    129a:	bf 4f       	sbci	r27, 0xFF	; 255
    129c:	fe 01       	movw	r30, r28
    129e:	e5 5b       	subi	r30, 0xB5	; 181
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	80 81       	ld	r24, Z
    12a4:	91 81       	ldd	r25, Z+1	; 0x01
    12a6:	8d 93       	st	X+, r24
    12a8:	9c 93       	st	X, r25
    12aa:	fe 01       	movw	r30, r28
    12ac:	e9 5b       	subi	r30, 0xB9	; 185
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	80 81       	ld	r24, Z
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <LCD_sendCommand+0x2f4>
    12b8:	fe 01       	movw	r30, r28
    12ba:	e9 5b       	subi	r30, 0xB9	; 185
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	91 83       	std	Z+1, r25	; 0x01
    12c0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    12c2:	fe 01       	movw	r30, r28
    12c4:	ed 59       	subi	r30, 0x9D	; 157
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	80 81       	ld	r24, Z
    12ca:	88 2f       	mov	r24, r24
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	80 71       	andi	r24, 0x10	; 16
    12d0:	90 70       	andi	r25, 0x00	; 0
    12d2:	95 95       	asr	r25
    12d4:	87 95       	ror	r24
    12d6:	95 95       	asr	r25
    12d8:	87 95       	ror	r24
    12da:	95 95       	asr	r25
    12dc:	87 95       	ror	r24
    12de:	95 95       	asr	r25
    12e0:	87 95       	ror	r24
    12e2:	98 2f       	mov	r25, r24
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	49 2f       	mov	r20, r25
    12ea:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    12ee:	fe 01       	movw	r30, r28
    12f0:	ed 59       	subi	r30, 0x9D	; 157
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	80 81       	ld	r24, Z
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	80 72       	andi	r24, 0x20	; 32
    12fc:	90 70       	andi	r25, 0x00	; 0
    12fe:	95 95       	asr	r25
    1300:	87 95       	ror	r24
    1302:	95 95       	asr	r25
    1304:	87 95       	ror	r24
    1306:	95 95       	asr	r25
    1308:	87 95       	ror	r24
    130a:	95 95       	asr	r25
    130c:	87 95       	ror	r24
    130e:	95 95       	asr	r25
    1310:	87 95       	ror	r24
    1312:	98 2f       	mov	r25, r24
    1314:	83 e0       	ldi	r24, 0x03	; 3
    1316:	61 e0       	ldi	r22, 0x01	; 1
    1318:	49 2f       	mov	r20, r25
    131a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    131e:	fe 01       	movw	r30, r28
    1320:	ed 59       	subi	r30, 0x9D	; 157
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	80 81       	ld	r24, Z
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	80 74       	andi	r24, 0x40	; 64
    132c:	90 70       	andi	r25, 0x00	; 0
    132e:	08 2e       	mov	r0, r24
    1330:	89 2f       	mov	r24, r25
    1332:	00 0c       	add	r0, r0
    1334:	88 1f       	adc	r24, r24
    1336:	99 0b       	sbc	r25, r25
    1338:	00 0c       	add	r0, r0
    133a:	88 1f       	adc	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	98 2f       	mov	r25, r24
    1340:	83 e0       	ldi	r24, 0x03	; 3
    1342:	62 e0       	ldi	r22, 0x02	; 2
    1344:	49 2f       	mov	r20, r25
    1346:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    134a:	fe 01       	movw	r30, r28
    134c:	ed 59       	subi	r30, 0x9D	; 157
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	80 81       	ld	r24, Z
    1352:	98 2f       	mov	r25, r24
    1354:	99 1f       	adc	r25, r25
    1356:	99 27       	eor	r25, r25
    1358:	99 1f       	adc	r25, r25
    135a:	83 e0       	ldi	r24, 0x03	; 3
    135c:	63 e0       	ldi	r22, 0x03	; 3
    135e:	49 2f       	mov	r20, r25
    1360:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
    1364:	fe 01       	movw	r30, r28
    1366:	ed 5b       	subi	r30, 0xBD	; 189
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a0 e8       	ldi	r26, 0x80	; 128
    1370:	bf e3       	ldi	r27, 0x3F	; 63
    1372:	80 83       	st	Z, r24
    1374:	91 83       	std	Z+1, r25	; 0x01
    1376:	a2 83       	std	Z+2, r26	; 0x02
    1378:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    137a:	8e 01       	movw	r16, r28
    137c:	01 5c       	subi	r16, 0xC1	; 193
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	fe 01       	movw	r30, r28
    1382:	ed 5b       	subi	r30, 0xBD	; 189
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	60 81       	ld	r22, Z
    1388:	71 81       	ldd	r23, Z+1	; 0x01
    138a:	82 81       	ldd	r24, Z+2	; 0x02
    138c:	93 81       	ldd	r25, Z+3	; 0x03
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	4a e7       	ldi	r20, 0x7A	; 122
    1394:	53 e4       	ldi	r21, 0x43	; 67
    1396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	f8 01       	movw	r30, r16
    13a0:	80 83       	st	Z, r24
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	a2 83       	std	Z+2, r26	; 0x02
    13a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13a8:	fe 01       	movw	r30, r28
    13aa:	ff 96       	adiw	r30, 0x3f	; 63
    13ac:	60 81       	ld	r22, Z
    13ae:	71 81       	ldd	r23, Z+1	; 0x01
    13b0:	82 81       	ldd	r24, Z+2	; 0x02
    13b2:	93 81       	ldd	r25, Z+3	; 0x03
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e8       	ldi	r20, 0x80	; 128
    13ba:	5f e3       	ldi	r21, 0x3F	; 63
    13bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c0:	88 23       	and	r24, r24
    13c2:	2c f4       	brge	.+10     	; 0x13ce <LCD_sendCommand+0x40e>
		__ticks = 1;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	9e af       	std	Y+62, r25	; 0x3e
    13ca:	8d af       	std	Y+61, r24	; 0x3d
    13cc:	46 c0       	rjmp	.+140    	; 0x145a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    13ce:	fe 01       	movw	r30, r28
    13d0:	ff 96       	adiw	r30, 0x3f	; 63
    13d2:	60 81       	ld	r22, Z
    13d4:	71 81       	ldd	r23, Z+1	; 0x01
    13d6:	82 81       	ldd	r24, Z+2	; 0x02
    13d8:	93 81       	ldd	r25, Z+3	; 0x03
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	4f e7       	ldi	r20, 0x7F	; 127
    13e0:	57 e4       	ldi	r21, 0x47	; 71
    13e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e6:	18 16       	cp	r1, r24
    13e8:	64 f5       	brge	.+88     	; 0x1442 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ea:	fe 01       	movw	r30, r28
    13ec:	ed 5b       	subi	r30, 0xBD	; 189
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	60 81       	ld	r22, Z
    13f2:	71 81       	ldd	r23, Z+1	; 0x01
    13f4:	82 81       	ldd	r24, Z+2	; 0x02
    13f6:	93 81       	ldd	r25, Z+3	; 0x03
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e2       	ldi	r20, 0x20	; 32
    13fe:	51 e4       	ldi	r21, 0x41	; 65
    1400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	bc 01       	movw	r22, r24
    140a:	cd 01       	movw	r24, r26
    140c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	9e af       	std	Y+62, r25	; 0x3e
    1416:	8d af       	std	Y+61, r24	; 0x3d
    1418:	0f c0       	rjmp	.+30     	; 0x1438 <LCD_sendCommand+0x478>
    141a:	89 e1       	ldi	r24, 0x19	; 25
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	9c af       	std	Y+60, r25	; 0x3c
    1420:	8b af       	std	Y+59, r24	; 0x3b
    1422:	8b ad       	ldd	r24, Y+59	; 0x3b
    1424:	9c ad       	ldd	r25, Y+60	; 0x3c
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <LCD_sendCommand+0x466>
    142a:	9c af       	std	Y+60, r25	; 0x3c
    142c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    142e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1430:	9e ad       	ldd	r25, Y+62	; 0x3e
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	9e af       	std	Y+62, r25	; 0x3e
    1436:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1438:	8d ad       	ldd	r24, Y+61	; 0x3d
    143a:	9e ad       	ldd	r25, Y+62	; 0x3e
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	69 f7       	brne	.-38     	; 0x141a <LCD_sendCommand+0x45a>
    1440:	16 c0       	rjmp	.+44     	; 0x146e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1442:	fe 01       	movw	r30, r28
    1444:	ff 96       	adiw	r30, 0x3f	; 63
    1446:	60 81       	ld	r22, Z
    1448:	71 81       	ldd	r23, Z+1	; 0x01
    144a:	82 81       	ldd	r24, Z+2	; 0x02
    144c:	93 81       	ldd	r25, Z+3	; 0x03
    144e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9e af       	std	Y+62, r25	; 0x3e
    1458:	8d af       	std	Y+61, r24	; 0x3d
    145a:	8d ad       	ldd	r24, Y+61	; 0x3d
    145c:	9e ad       	ldd	r25, Y+62	; 0x3e
    145e:	9a af       	std	Y+58, r25	; 0x3a
    1460:	89 af       	std	Y+57, r24	; 0x39
    1462:	89 ad       	ldd	r24, Y+57	; 0x39
    1464:	9a ad       	ldd	r25, Y+58	; 0x3a
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <LCD_sendCommand+0x4a6>
    146a:	9a af       	std	Y+58, r25	; 0x3a
    146c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	62 e0       	ldi	r22, 0x02	; 2
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a0 e8       	ldi	r26, 0x80	; 128
    147e:	bf e3       	ldi	r27, 0x3F	; 63
    1480:	8d ab       	std	Y+53, r24	; 0x35
    1482:	9e ab       	std	Y+54, r25	; 0x36
    1484:	af ab       	std	Y+55, r26	; 0x37
    1486:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1488:	6d a9       	ldd	r22, Y+53	; 0x35
    148a:	7e a9       	ldd	r23, Y+54	; 0x36
    148c:	8f a9       	ldd	r24, Y+55	; 0x37
    148e:	98 ad       	ldd	r25, Y+56	; 0x38
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	4a e7       	ldi	r20, 0x7A	; 122
    1496:	53 e4       	ldi	r21, 0x43	; 67
    1498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	89 ab       	std	Y+49, r24	; 0x31
    14a2:	9a ab       	std	Y+50, r25	; 0x32
    14a4:	ab ab       	std	Y+51, r26	; 0x33
    14a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14a8:	69 a9       	ldd	r22, Y+49	; 0x31
    14aa:	7a a9       	ldd	r23, Y+50	; 0x32
    14ac:	8b a9       	ldd	r24, Y+51	; 0x33
    14ae:	9c a9       	ldd	r25, Y+52	; 0x34
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e8       	ldi	r20, 0x80	; 128
    14b6:	5f e3       	ldi	r21, 0x3F	; 63
    14b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14bc:	88 23       	and	r24, r24
    14be:	2c f4       	brge	.+10     	; 0x14ca <LCD_sendCommand+0x50a>
		__ticks = 1;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	98 ab       	std	Y+48, r25	; 0x30
    14c6:	8f a7       	std	Y+47, r24	; 0x2f
    14c8:	3f c0       	rjmp	.+126    	; 0x1548 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    14ca:	69 a9       	ldd	r22, Y+49	; 0x31
    14cc:	7a a9       	ldd	r23, Y+50	; 0x32
    14ce:	8b a9       	ldd	r24, Y+51	; 0x33
    14d0:	9c a9       	ldd	r25, Y+52	; 0x34
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	3f ef       	ldi	r19, 0xFF	; 255
    14d6:	4f e7       	ldi	r20, 0x7F	; 127
    14d8:	57 e4       	ldi	r21, 0x47	; 71
    14da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14de:	18 16       	cp	r1, r24
    14e0:	4c f5       	brge	.+82     	; 0x1534 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e2:	6d a9       	ldd	r22, Y+53	; 0x35
    14e4:	7e a9       	ldd	r23, Y+54	; 0x36
    14e6:	8f a9       	ldd	r24, Y+55	; 0x37
    14e8:	98 ad       	ldd	r25, Y+56	; 0x38
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e2       	ldi	r20, 0x20	; 32
    14f0:	51 e4       	ldi	r21, 0x41	; 65
    14f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	bc 01       	movw	r22, r24
    14fc:	cd 01       	movw	r24, r26
    14fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	98 ab       	std	Y+48, r25	; 0x30
    1508:	8f a7       	std	Y+47, r24	; 0x2f
    150a:	0f c0       	rjmp	.+30     	; 0x152a <LCD_sendCommand+0x56a>
    150c:	89 e1       	ldi	r24, 0x19	; 25
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	9e a7       	std	Y+46, r25	; 0x2e
    1512:	8d a7       	std	Y+45, r24	; 0x2d
    1514:	8d a5       	ldd	r24, Y+45	; 0x2d
    1516:	9e a5       	ldd	r25, Y+46	; 0x2e
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <LCD_sendCommand+0x558>
    151c:	9e a7       	std	Y+46, r25	; 0x2e
    151e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1520:	8f a5       	ldd	r24, Y+47	; 0x2f
    1522:	98 a9       	ldd	r25, Y+48	; 0x30
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	98 ab       	std	Y+48, r25	; 0x30
    1528:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152a:	8f a5       	ldd	r24, Y+47	; 0x2f
    152c:	98 a9       	ldd	r25, Y+48	; 0x30
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	69 f7       	brne	.-38     	; 0x150c <LCD_sendCommand+0x54c>
    1532:	14 c0       	rjmp	.+40     	; 0x155c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1534:	69 a9       	ldd	r22, Y+49	; 0x31
    1536:	7a a9       	ldd	r23, Y+50	; 0x32
    1538:	8b a9       	ldd	r24, Y+51	; 0x33
    153a:	9c a9       	ldd	r25, Y+52	; 0x34
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	98 ab       	std	Y+48, r25	; 0x30
    1546:	8f a7       	std	Y+47, r24	; 0x2f
    1548:	8f a5       	ldd	r24, Y+47	; 0x2f
    154a:	98 a9       	ldd	r25, Y+48	; 0x30
    154c:	9c a7       	std	Y+44, r25	; 0x2c
    154e:	8b a7       	std	Y+43, r24	; 0x2b
    1550:	8b a5       	ldd	r24, Y+43	; 0x2b
    1552:	9c a5       	ldd	r25, Y+44	; 0x2c
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <LCD_sendCommand+0x594>
    1558:	9c a7       	std	Y+44, r25	; 0x2c
    155a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	62 e0       	ldi	r22, 0x02	; 2
    1560:	41 e0       	ldi	r20, 0x01	; 1
    1562:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	a0 e8       	ldi	r26, 0x80	; 128
    156c:	bf e3       	ldi	r27, 0x3F	; 63
    156e:	8f a3       	std	Y+39, r24	; 0x27
    1570:	98 a7       	std	Y+40, r25	; 0x28
    1572:	a9 a7       	std	Y+41, r26	; 0x29
    1574:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1576:	6f a1       	ldd	r22, Y+39	; 0x27
    1578:	78 a5       	ldd	r23, Y+40	; 0x28
    157a:	89 a5       	ldd	r24, Y+41	; 0x29
    157c:	9a a5       	ldd	r25, Y+42	; 0x2a
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	4a e7       	ldi	r20, 0x7A	; 122
    1584:	53 e4       	ldi	r21, 0x43	; 67
    1586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	8b a3       	std	Y+35, r24	; 0x23
    1590:	9c a3       	std	Y+36, r25	; 0x24
    1592:	ad a3       	std	Y+37, r26	; 0x25
    1594:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1596:	6b a1       	ldd	r22, Y+35	; 0x23
    1598:	7c a1       	ldd	r23, Y+36	; 0x24
    159a:	8d a1       	ldd	r24, Y+37	; 0x25
    159c:	9e a1       	ldd	r25, Y+38	; 0x26
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15aa:	88 23       	and	r24, r24
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9a a3       	std	Y+34, r25	; 0x22
    15b4:	89 a3       	std	Y+33, r24	; 0x21
    15b6:	3f c0       	rjmp	.+126    	; 0x1636 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    15b8:	6b a1       	ldd	r22, Y+35	; 0x23
    15ba:	7c a1       	ldd	r23, Y+36	; 0x24
    15bc:	8d a1       	ldd	r24, Y+37	; 0x25
    15be:	9e a1       	ldd	r25, Y+38	; 0x26
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	3f ef       	ldi	r19, 0xFF	; 255
    15c4:	4f e7       	ldi	r20, 0x7F	; 127
    15c6:	57 e4       	ldi	r21, 0x47	; 71
    15c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15cc:	18 16       	cp	r1, r24
    15ce:	4c f5       	brge	.+82     	; 0x1622 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	6f a1       	ldd	r22, Y+39	; 0x27
    15d2:	78 a5       	ldd	r23, Y+40	; 0x28
    15d4:	89 a5       	ldd	r24, Y+41	; 0x29
    15d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e2       	ldi	r20, 0x20	; 32
    15de:	51 e4       	ldi	r21, 0x41	; 65
    15e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	bc 01       	movw	r22, r24
    15ea:	cd 01       	movw	r24, r26
    15ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9a a3       	std	Y+34, r25	; 0x22
    15f6:	89 a3       	std	Y+33, r24	; 0x21
    15f8:	0f c0       	rjmp	.+30     	; 0x1618 <LCD_sendCommand+0x658>
    15fa:	89 e1       	ldi	r24, 0x19	; 25
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	98 a3       	std	Y+32, r25	; 0x20
    1600:	8f 8f       	std	Y+31, r24	; 0x1f
    1602:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1604:	98 a1       	ldd	r25, Y+32	; 0x20
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <LCD_sendCommand+0x646>
    160a:	98 a3       	std	Y+32, r25	; 0x20
    160c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160e:	89 a1       	ldd	r24, Y+33	; 0x21
    1610:	9a a1       	ldd	r25, Y+34	; 0x22
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	9a a3       	std	Y+34, r25	; 0x22
    1616:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1618:	89 a1       	ldd	r24, Y+33	; 0x21
    161a:	9a a1       	ldd	r25, Y+34	; 0x22
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	69 f7       	brne	.-38     	; 0x15fa <LCD_sendCommand+0x63a>
    1620:	14 c0       	rjmp	.+40     	; 0x164a <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1622:	6b a1       	ldd	r22, Y+35	; 0x23
    1624:	7c a1       	ldd	r23, Y+36	; 0x24
    1626:	8d a1       	ldd	r24, Y+37	; 0x25
    1628:	9e a1       	ldd	r25, Y+38	; 0x26
    162a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	9a a3       	std	Y+34, r25	; 0x22
    1634:	89 a3       	std	Y+33, r24	; 0x21
    1636:	89 a1       	ldd	r24, Y+33	; 0x21
    1638:	9a a1       	ldd	r25, Y+34	; 0x22
    163a:	9e 8f       	std	Y+30, r25	; 0x1e
    163c:	8d 8f       	std	Y+29, r24	; 0x1d
    163e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1640:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <LCD_sendCommand+0x682>
    1646:	9e 8f       	std	Y+30, r25	; 0x1e
    1648:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    164a:	fe 01       	movw	r30, r28
    164c:	ed 59       	subi	r30, 0x9D	; 157
    164e:	ff 4f       	sbci	r31, 0xFF	; 255
    1650:	80 81       	ld	r24, Z
    1652:	98 2f       	mov	r25, r24
    1654:	91 70       	andi	r25, 0x01	; 1
    1656:	83 e0       	ldi	r24, 0x03	; 3
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	49 2f       	mov	r20, r25
    165c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1660:	fe 01       	movw	r30, r28
    1662:	ed 59       	subi	r30, 0x9D	; 157
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	80 81       	ld	r24, Z
    1668:	88 2f       	mov	r24, r24
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	82 70       	andi	r24, 0x02	; 2
    166e:	90 70       	andi	r25, 0x00	; 0
    1670:	95 95       	asr	r25
    1672:	87 95       	ror	r24
    1674:	98 2f       	mov	r25, r24
    1676:	83 e0       	ldi	r24, 0x03	; 3
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	49 2f       	mov	r20, r25
    167c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1680:	fe 01       	movw	r30, r28
    1682:	ed 59       	subi	r30, 0x9D	; 157
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	80 81       	ld	r24, Z
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	84 70       	andi	r24, 0x04	; 4
    168e:	90 70       	andi	r25, 0x00	; 0
    1690:	95 95       	asr	r25
    1692:	87 95       	ror	r24
    1694:	95 95       	asr	r25
    1696:	87 95       	ror	r24
    1698:	98 2f       	mov	r25, r24
    169a:	83 e0       	ldi	r24, 0x03	; 3
    169c:	62 e0       	ldi	r22, 0x02	; 2
    169e:	49 2f       	mov	r20, r25
    16a0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    16a4:	fe 01       	movw	r30, r28
    16a6:	ed 59       	subi	r30, 0x9D	; 157
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	80 81       	ld	r24, Z
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	88 70       	andi	r24, 0x08	; 8
    16b2:	90 70       	andi	r25, 0x00	; 0
    16b4:	95 95       	asr	r25
    16b6:	87 95       	ror	r24
    16b8:	95 95       	asr	r25
    16ba:	87 95       	ror	r24
    16bc:	95 95       	asr	r25
    16be:	87 95       	ror	r24
    16c0:	98 2f       	mov	r25, r24
    16c2:	83 e0       	ldi	r24, 0x03	; 3
    16c4:	63 e0       	ldi	r22, 0x03	; 3
    16c6:	49 2f       	mov	r20, r25
    16c8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	a0 e8       	ldi	r26, 0x80	; 128
    16d2:	bf e3       	ldi	r27, 0x3F	; 63
    16d4:	89 8f       	std	Y+25, r24	; 0x19
    16d6:	9a 8f       	std	Y+26, r25	; 0x1a
    16d8:	ab 8f       	std	Y+27, r26	; 0x1b
    16da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16dc:	69 8d       	ldd	r22, Y+25	; 0x19
    16de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	4a e7       	ldi	r20, 0x7A	; 122
    16ea:	53 e4       	ldi	r21, 0x43	; 67
    16ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	8d 8b       	std	Y+21, r24	; 0x15
    16f6:	9e 8b       	std	Y+22, r25	; 0x16
    16f8:	af 8b       	std	Y+23, r26	; 0x17
    16fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16fc:	6d 89       	ldd	r22, Y+21	; 0x15
    16fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1700:	8f 89       	ldd	r24, Y+23	; 0x17
    1702:	98 8d       	ldd	r25, Y+24	; 0x18
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e8       	ldi	r20, 0x80	; 128
    170a:	5f e3       	ldi	r21, 0x3F	; 63
    170c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1710:	88 23       	and	r24, r24
    1712:	2c f4       	brge	.+10     	; 0x171e <LCD_sendCommand+0x75e>
		__ticks = 1;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9c 8b       	std	Y+20, r25	; 0x14
    171a:	8b 8b       	std	Y+19, r24	; 0x13
    171c:	3f c0       	rjmp	.+126    	; 0x179c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    171e:	6d 89       	ldd	r22, Y+21	; 0x15
    1720:	7e 89       	ldd	r23, Y+22	; 0x16
    1722:	8f 89       	ldd	r24, Y+23	; 0x17
    1724:	98 8d       	ldd	r25, Y+24	; 0x18
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	3f ef       	ldi	r19, 0xFF	; 255
    172a:	4f e7       	ldi	r20, 0x7F	; 127
    172c:	57 e4       	ldi	r21, 0x47	; 71
    172e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1732:	18 16       	cp	r1, r24
    1734:	4c f5       	brge	.+82     	; 0x1788 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1736:	69 8d       	ldd	r22, Y+25	; 0x19
    1738:	7a 8d       	ldd	r23, Y+26	; 0x1a
    173a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e2       	ldi	r20, 0x20	; 32
    1744:	51 e4       	ldi	r21, 0x41	; 65
    1746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9c 8b       	std	Y+20, r25	; 0x14
    175c:	8b 8b       	std	Y+19, r24	; 0x13
    175e:	0f c0       	rjmp	.+30     	; 0x177e <LCD_sendCommand+0x7be>
    1760:	89 e1       	ldi	r24, 0x19	; 25
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9a 8b       	std	Y+18, r25	; 0x12
    1766:	89 8b       	std	Y+17, r24	; 0x11
    1768:	89 89       	ldd	r24, Y+17	; 0x11
    176a:	9a 89       	ldd	r25, Y+18	; 0x12
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <LCD_sendCommand+0x7ac>
    1770:	9a 8b       	std	Y+18, r25	; 0x12
    1772:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1774:	8b 89       	ldd	r24, Y+19	; 0x13
    1776:	9c 89       	ldd	r25, Y+20	; 0x14
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	9c 8b       	std	Y+20, r25	; 0x14
    177c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177e:	8b 89       	ldd	r24, Y+19	; 0x13
    1780:	9c 89       	ldd	r25, Y+20	; 0x14
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	69 f7       	brne	.-38     	; 0x1760 <LCD_sendCommand+0x7a0>
    1786:	14 c0       	rjmp	.+40     	; 0x17b0 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1788:	6d 89       	ldd	r22, Y+21	; 0x15
    178a:	7e 89       	ldd	r23, Y+22	; 0x16
    178c:	8f 89       	ldd	r24, Y+23	; 0x17
    178e:	98 8d       	ldd	r25, Y+24	; 0x18
    1790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	9c 8b       	std	Y+20, r25	; 0x14
    179a:	8b 8b       	std	Y+19, r24	; 0x13
    179c:	8b 89       	ldd	r24, Y+19	; 0x13
    179e:	9c 89       	ldd	r25, Y+20	; 0x14
    17a0:	98 8b       	std	Y+16, r25	; 0x10
    17a2:	8f 87       	std	Y+15, r24	; 0x0f
    17a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a6:	98 89       	ldd	r25, Y+16	; 0x10
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <LCD_sendCommand+0x7e8>
    17ac:	98 8b       	std	Y+16, r25	; 0x10
    17ae:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	62 e0       	ldi	r22, 0x02	; 2
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a0 e8       	ldi	r26, 0x80	; 128
    17c0:	bf e3       	ldi	r27, 0x3F	; 63
    17c2:	8b 87       	std	Y+11, r24	; 0x0b
    17c4:	9c 87       	std	Y+12, r25	; 0x0c
    17c6:	ad 87       	std	Y+13, r26	; 0x0d
    17c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    17cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4a e7       	ldi	r20, 0x7A	; 122
    17d8:	53 e4       	ldi	r21, 0x43	; 67
    17da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	8f 83       	std	Y+7, r24	; 0x07
    17e4:	98 87       	std	Y+8, r25	; 0x08
    17e6:	a9 87       	std	Y+9, r26	; 0x09
    17e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ea:	6f 81       	ldd	r22, Y+7	; 0x07
    17ec:	78 85       	ldd	r23, Y+8	; 0x08
    17ee:	89 85       	ldd	r24, Y+9	; 0x09
    17f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e8       	ldi	r20, 0x80	; 128
    17f8:	5f e3       	ldi	r21, 0x3F	; 63
    17fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17fe:	88 23       	and	r24, r24
    1800:	2c f4       	brge	.+10     	; 0x180c <LCD_sendCommand+0x84c>
		__ticks = 1;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
    180a:	3f c0       	rjmp	.+126    	; 0x188a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    180c:	6f 81       	ldd	r22, Y+7	; 0x07
    180e:	78 85       	ldd	r23, Y+8	; 0x08
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	3f ef       	ldi	r19, 0xFF	; 255
    1818:	4f e7       	ldi	r20, 0x7F	; 127
    181a:	57 e4       	ldi	r21, 0x47	; 71
    181c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1820:	18 16       	cp	r1, r24
    1822:	4c f5       	brge	.+82     	; 0x1876 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1824:	6b 85       	ldd	r22, Y+11	; 0x0b
    1826:	7c 85       	ldd	r23, Y+12	; 0x0c
    1828:	8d 85       	ldd	r24, Y+13	; 0x0d
    182a:	9e 85       	ldd	r25, Y+14	; 0x0e
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	51 e4       	ldi	r21, 0x41	; 65
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9e 83       	std	Y+6, r25	; 0x06
    184a:	8d 83       	std	Y+5, r24	; 0x05
    184c:	0f c0       	rjmp	.+30     	; 0x186c <LCD_sendCommand+0x8ac>
    184e:	89 e1       	ldi	r24, 0x19	; 25
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	9c 83       	std	Y+4, r25	; 0x04
    1854:	8b 83       	std	Y+3, r24	; 0x03
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <LCD_sendCommand+0x89a>
    185e:	9c 83       	std	Y+4, r25	; 0x04
    1860:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1862:	8d 81       	ldd	r24, Y+5	; 0x05
    1864:	9e 81       	ldd	r25, Y+6	; 0x06
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	9e 83       	std	Y+6, r25	; 0x06
    186a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186c:	8d 81       	ldd	r24, Y+5	; 0x05
    186e:	9e 81       	ldd	r25, Y+6	; 0x06
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	69 f7       	brne	.-38     	; 0x184e <LCD_sendCommand+0x88e>
    1874:	14 c0       	rjmp	.+40     	; 0x189e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1876:	6f 81       	ldd	r22, Y+7	; 0x07
    1878:	78 85       	ldd	r23, Y+8	; 0x08
    187a:	89 85       	ldd	r24, Y+9	; 0x09
    187c:	9a 85       	ldd	r25, Y+10	; 0x0a
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	9e 81       	ldd	r25, Y+6	; 0x06
    188e:	9a 83       	std	Y+2, r25	; 0x02
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	9a 81       	ldd	r25, Y+2	; 0x02
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <LCD_sendCommand+0x8d6>
    189a:	9a 83       	std	Y+2, r25	; 0x02
    189c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    189e:	cd 59       	subi	r28, 0x9D	; 157
    18a0:	df 4f       	sbci	r29, 0xFF	; 255
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	08 95       	ret

000018b6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	c3 56       	subi	r28, 0x63	; 99
    18c4:	d0 40       	sbci	r29, 0x00	; 0
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	fe 01       	movw	r30, r28
    18d2:	ed 59       	subi	r30, 0x9D	; 157
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	61 e0       	ldi	r22, 0x01	; 1
    18dc:	41 e0       	ldi	r20, 0x01	; 1
    18de:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
    18e2:	fe 01       	movw	r30, r28
    18e4:	e1 5a       	subi	r30, 0xA1	; 161
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a0 e8       	ldi	r26, 0x80	; 128
    18ee:	bf e3       	ldi	r27, 0x3F	; 63
    18f0:	80 83       	st	Z, r24
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	a2 83       	std	Z+2, r26	; 0x02
    18f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f8:	8e 01       	movw	r16, r28
    18fa:	05 5a       	subi	r16, 0xA5	; 165
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255
    18fe:	fe 01       	movw	r30, r28
    1900:	e1 5a       	subi	r30, 0xA1	; 161
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	4a e7       	ldi	r20, 0x7A	; 122
    1912:	53 e4       	ldi	r21, 0x43	; 67
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	f8 01       	movw	r30, r16
    191e:	80 83       	st	Z, r24
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	a2 83       	std	Z+2, r26	; 0x02
    1924:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1926:	fe 01       	movw	r30, r28
    1928:	e5 5a       	subi	r30, 0xA5	; 165
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	60 81       	ld	r22, Z
    192e:	71 81       	ldd	r23, Z+1	; 0x01
    1930:	82 81       	ldd	r24, Z+2	; 0x02
    1932:	93 81       	ldd	r25, Z+3	; 0x03
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e8       	ldi	r20, 0x80	; 128
    193a:	5f e3       	ldi	r21, 0x3F	; 63
    193c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1940:	88 23       	and	r24, r24
    1942:	44 f4       	brge	.+16     	; 0x1954 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1944:	fe 01       	movw	r30, r28
    1946:	e7 5a       	subi	r30, 0xA7	; 167
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	80 83       	st	Z, r24
    1952:	64 c0       	rjmp	.+200    	; 0x1a1c <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1954:	fe 01       	movw	r30, r28
    1956:	e5 5a       	subi	r30, 0xA5	; 165
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	60 81       	ld	r22, Z
    195c:	71 81       	ldd	r23, Z+1	; 0x01
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	93 81       	ldd	r25, Z+3	; 0x03
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	3f ef       	ldi	r19, 0xFF	; 255
    1966:	4f e7       	ldi	r20, 0x7F	; 127
    1968:	57 e4       	ldi	r21, 0x47	; 71
    196a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    196e:	18 16       	cp	r1, r24
    1970:	0c f0       	brlt	.+2      	; 0x1974 <LCD_displayCharacter+0xbe>
    1972:	43 c0       	rjmp	.+134    	; 0x19fa <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1974:	fe 01       	movw	r30, r28
    1976:	e1 5a       	subi	r30, 0xA1	; 161
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	60 81       	ld	r22, Z
    197c:	71 81       	ldd	r23, Z+1	; 0x01
    197e:	82 81       	ldd	r24, Z+2	; 0x02
    1980:	93 81       	ldd	r25, Z+3	; 0x03
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e2       	ldi	r20, 0x20	; 32
    1988:	51 e4       	ldi	r21, 0x41	; 65
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	8e 01       	movw	r16, r28
    1994:	07 5a       	subi	r16, 0xA7	; 167
    1996:	1f 4f       	sbci	r17, 0xFF	; 255
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	f8 01       	movw	r30, r16
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
    19aa:	1f c0       	rjmp	.+62     	; 0x19ea <LCD_displayCharacter+0x134>
    19ac:	fe 01       	movw	r30, r28
    19ae:	e9 5a       	subi	r30, 0xA9	; 169
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	89 e1       	ldi	r24, 0x19	; 25
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	91 83       	std	Z+1, r25	; 0x01
    19b8:	80 83       	st	Z, r24
    19ba:	fe 01       	movw	r30, r28
    19bc:	e9 5a       	subi	r30, 0xA9	; 169
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <LCD_displayCharacter+0x10e>
    19c8:	fe 01       	movw	r30, r28
    19ca:	e9 5a       	subi	r30, 0xA9	; 169
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d2:	de 01       	movw	r26, r28
    19d4:	a7 5a       	subi	r26, 0xA7	; 167
    19d6:	bf 4f       	sbci	r27, 0xFF	; 255
    19d8:	fe 01       	movw	r30, r28
    19da:	e7 5a       	subi	r30, 0xA7	; 167
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	80 81       	ld	r24, Z
    19e0:	91 81       	ldd	r25, Z+1	; 0x01
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	11 96       	adiw	r26, 0x01	; 1
    19e6:	9c 93       	st	X, r25
    19e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ea:	fe 01       	movw	r30, r28
    19ec:	e7 5a       	subi	r30, 0xA7	; 167
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	d1 f6       	brne	.-76     	; 0x19ac <LCD_displayCharacter+0xf6>
    19f8:	27 c0       	rjmp	.+78     	; 0x1a48 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fa:	8e 01       	movw	r16, r28
    19fc:	07 5a       	subi	r16, 0xA7	; 167
    19fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1a00:	fe 01       	movw	r30, r28
    1a02:	e5 5a       	subi	r30, 0xA5	; 165
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	60 81       	ld	r22, Z
    1a08:	71 81       	ldd	r23, Z+1	; 0x01
    1a0a:	82 81       	ldd	r24, Z+2	; 0x02
    1a0c:	93 81       	ldd	r25, Z+3	; 0x03
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	f8 01       	movw	r30, r16
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
    1a1c:	de 01       	movw	r26, r28
    1a1e:	ab 5a       	subi	r26, 0xAB	; 171
    1a20:	bf 4f       	sbci	r27, 0xFF	; 255
    1a22:	fe 01       	movw	r30, r28
    1a24:	e7 5a       	subi	r30, 0xA7	; 167
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	80 81       	ld	r24, Z
    1a2a:	91 81       	ldd	r25, Z+1	; 0x01
    1a2c:	8d 93       	st	X+, r24
    1a2e:	9c 93       	st	X, r25
    1a30:	fe 01       	movw	r30, r28
    1a32:	eb 5a       	subi	r30, 0xAB	; 171
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <LCD_displayCharacter+0x184>
    1a3e:	fe 01       	movw	r30, r28
    1a40:	eb 5a       	subi	r30, 0xAB	; 171
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	91 83       	std	Z+1, r25	; 0x01
    1a46:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	62 e0       	ldi	r22, 0x02	; 2
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
    1a52:	fe 01       	movw	r30, r28
    1a54:	ef 5a       	subi	r30, 0xAF	; 175
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a0 e8       	ldi	r26, 0x80	; 128
    1a5e:	bf e3       	ldi	r27, 0x3F	; 63
    1a60:	80 83       	st	Z, r24
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	a2 83       	std	Z+2, r26	; 0x02
    1a66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a68:	8e 01       	movw	r16, r28
    1a6a:	03 5b       	subi	r16, 0xB3	; 179
    1a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ef 5a       	subi	r30, 0xAF	; 175
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	60 81       	ld	r22, Z
    1a76:	71 81       	ldd	r23, Z+1	; 0x01
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	93 81       	ldd	r25, Z+3	; 0x03
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	4a e7       	ldi	r20, 0x7A	; 122
    1a82:	53 e4       	ldi	r21, 0x43	; 67
    1a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	80 83       	st	Z, r24
    1a90:	91 83       	std	Z+1, r25	; 0x01
    1a92:	a2 83       	std	Z+2, r26	; 0x02
    1a94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a96:	fe 01       	movw	r30, r28
    1a98:	e3 5b       	subi	r30, 0xB3	; 179
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	60 81       	ld	r22, Z
    1a9e:	71 81       	ldd	r23, Z+1	; 0x01
    1aa0:	82 81       	ldd	r24, Z+2	; 0x02
    1aa2:	93 81       	ldd	r25, Z+3	; 0x03
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	44 f4       	brge	.+16     	; 0x1ac4 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e5 5b       	subi	r30, 0xB5	; 181
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
    1ac2:	64 c0       	rjmp	.+200    	; 0x1b8c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e3 5b       	subi	r30, 0xB3	; 179
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	60 81       	ld	r22, Z
    1acc:	71 81       	ldd	r23, Z+1	; 0x01
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	3f ef       	ldi	r19, 0xFF	; 255
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	57 e4       	ldi	r21, 0x47	; 71
    1ada:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	0c f0       	brlt	.+2      	; 0x1ae4 <LCD_displayCharacter+0x22e>
    1ae2:	43 c0       	rjmp	.+134    	; 0x1b6a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	ef 5a       	subi	r30, 0xAF	; 175
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	60 81       	ld	r22, Z
    1aec:	71 81       	ldd	r23, Z+1	; 0x01
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e2       	ldi	r20, 0x20	; 32
    1af8:	51 e4       	ldi	r21, 0x41	; 65
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	8e 01       	movw	r16, r28
    1b04:	05 5b       	subi	r16, 0xB5	; 181
    1b06:	1f 4f       	sbci	r17, 0xFF	; 255
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	f8 01       	movw	r30, r16
    1b16:	91 83       	std	Z+1, r25	; 0x01
    1b18:	80 83       	st	Z, r24
    1b1a:	1f c0       	rjmp	.+62     	; 0x1b5a <LCD_displayCharacter+0x2a4>
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e7 5b       	subi	r30, 0xB7	; 183
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	89 e1       	ldi	r24, 0x19	; 25
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	80 83       	st	Z, r24
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e7 5b       	subi	r30, 0xB7	; 183
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	91 81       	ldd	r25, Z+1	; 0x01
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <LCD_displayCharacter+0x27e>
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e7 5b       	subi	r30, 0xB7	; 183
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	91 83       	std	Z+1, r25	; 0x01
    1b40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b42:	de 01       	movw	r26, r28
    1b44:	a5 5b       	subi	r26, 0xB5	; 181
    1b46:	bf 4f       	sbci	r27, 0xFF	; 255
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e5 5b       	subi	r30, 0xB5	; 181
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	80 81       	ld	r24, Z
    1b50:	91 81       	ldd	r25, Z+1	; 0x01
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	11 96       	adiw	r26, 0x01	; 1
    1b56:	9c 93       	st	X, r25
    1b58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e5 5b       	subi	r30, 0xB5	; 181
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	80 81       	ld	r24, Z
    1b62:	91 81       	ldd	r25, Z+1	; 0x01
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	d1 f6       	brne	.-76     	; 0x1b1c <LCD_displayCharacter+0x266>
    1b68:	27 c0       	rjmp	.+78     	; 0x1bb8 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6a:	8e 01       	movw	r16, r28
    1b6c:	05 5b       	subi	r16, 0xB5	; 181
    1b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b70:	fe 01       	movw	r30, r28
    1b72:	e3 5b       	subi	r30, 0xB3	; 179
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	60 81       	ld	r22, Z
    1b78:	71 81       	ldd	r23, Z+1	; 0x01
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	93 81       	ldd	r25, Z+3	; 0x03
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	f8 01       	movw	r30, r16
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	80 83       	st	Z, r24
    1b8c:	de 01       	movw	r26, r28
    1b8e:	a9 5b       	subi	r26, 0xB9	; 185
    1b90:	bf 4f       	sbci	r27, 0xFF	; 255
    1b92:	fe 01       	movw	r30, r28
    1b94:	e5 5b       	subi	r30, 0xB5	; 181
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	8d 93       	st	X+, r24
    1b9e:	9c 93       	st	X, r25
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e9 5b       	subi	r30, 0xB9	; 185
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_displayCharacter+0x2f4>
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e9 5b       	subi	r30, 0xB9	; 185
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	91 83       	std	Z+1, r25	; 0x01
    1bb6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    1bb8:	fe 01       	movw	r30, r28
    1bba:	ed 59       	subi	r30, 0x9D	; 157
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	80 81       	ld	r24, Z
    1bc0:	88 2f       	mov	r24, r24
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	80 71       	andi	r24, 0x10	; 16
    1bc6:	90 70       	andi	r25, 0x00	; 0
    1bc8:	95 95       	asr	r25
    1bca:	87 95       	ror	r24
    1bcc:	95 95       	asr	r25
    1bce:	87 95       	ror	r24
    1bd0:	95 95       	asr	r25
    1bd2:	87 95       	ror	r24
    1bd4:	95 95       	asr	r25
    1bd6:	87 95       	ror	r24
    1bd8:	98 2f       	mov	r25, r24
    1bda:	83 e0       	ldi	r24, 0x03	; 3
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	49 2f       	mov	r20, r25
    1be0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    1be4:	fe 01       	movw	r30, r28
    1be6:	ed 59       	subi	r30, 0x9D	; 157
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	80 81       	ld	r24, Z
    1bec:	88 2f       	mov	r24, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	80 72       	andi	r24, 0x20	; 32
    1bf2:	90 70       	andi	r25, 0x00	; 0
    1bf4:	95 95       	asr	r25
    1bf6:	87 95       	ror	r24
    1bf8:	95 95       	asr	r25
    1bfa:	87 95       	ror	r24
    1bfc:	95 95       	asr	r25
    1bfe:	87 95       	ror	r24
    1c00:	95 95       	asr	r25
    1c02:	87 95       	ror	r24
    1c04:	95 95       	asr	r25
    1c06:	87 95       	ror	r24
    1c08:	98 2f       	mov	r25, r24
    1c0a:	83 e0       	ldi	r24, 0x03	; 3
    1c0c:	61 e0       	ldi	r22, 0x01	; 1
    1c0e:	49 2f       	mov	r20, r25
    1c10:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    1c14:	fe 01       	movw	r30, r28
    1c16:	ed 59       	subi	r30, 0x9D	; 157
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	80 81       	ld	r24, Z
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	80 74       	andi	r24, 0x40	; 64
    1c22:	90 70       	andi	r25, 0x00	; 0
    1c24:	08 2e       	mov	r0, r24
    1c26:	89 2f       	mov	r24, r25
    1c28:	00 0c       	add	r0, r0
    1c2a:	88 1f       	adc	r24, r24
    1c2c:	99 0b       	sbc	r25, r25
    1c2e:	00 0c       	add	r0, r0
    1c30:	88 1f       	adc	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	98 2f       	mov	r25, r24
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	62 e0       	ldi	r22, 0x02	; 2
    1c3a:	49 2f       	mov	r20, r25
    1c3c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    1c40:	fe 01       	movw	r30, r28
    1c42:	ed 59       	subi	r30, 0x9D	; 157
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	80 81       	ld	r24, Z
    1c48:	98 2f       	mov	r25, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	99 27       	eor	r25, r25
    1c4e:	99 1f       	adc	r25, r25
    1c50:	83 e0       	ldi	r24, 0x03	; 3
    1c52:	63 e0       	ldi	r22, 0x03	; 3
    1c54:	49 2f       	mov	r20, r25
    1c56:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	ed 5b       	subi	r30, 0xBD	; 189
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	a0 e8       	ldi	r26, 0x80	; 128
    1c66:	bf e3       	ldi	r27, 0x3F	; 63
    1c68:	80 83       	st	Z, r24
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	a2 83       	std	Z+2, r26	; 0x02
    1c6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c70:	8e 01       	movw	r16, r28
    1c72:	01 5c       	subi	r16, 0xC1	; 193
    1c74:	1f 4f       	sbci	r17, 0xFF	; 255
    1c76:	fe 01       	movw	r30, r28
    1c78:	ed 5b       	subi	r30, 0xBD	; 189
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	60 81       	ld	r22, Z
    1c7e:	71 81       	ldd	r23, Z+1	; 0x01
    1c80:	82 81       	ldd	r24, Z+2	; 0x02
    1c82:	93 81       	ldd	r25, Z+3	; 0x03
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	4a e7       	ldi	r20, 0x7A	; 122
    1c8a:	53 e4       	ldi	r21, 0x43	; 67
    1c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	f8 01       	movw	r30, r16
    1c96:	80 83       	st	Z, r24
    1c98:	91 83       	std	Z+1, r25	; 0x01
    1c9a:	a2 83       	std	Z+2, r26	; 0x02
    1c9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ff 96       	adiw	r30, 0x3f	; 63
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	93 81       	ldd	r25, Z+3	; 0x03
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e8       	ldi	r20, 0x80	; 128
    1cb0:	5f e3       	ldi	r21, 0x3F	; 63
    1cb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb6:	88 23       	and	r24, r24
    1cb8:	2c f4       	brge	.+10     	; 0x1cc4 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9e af       	std	Y+62, r25	; 0x3e
    1cc0:	8d af       	std	Y+61, r24	; 0x3d
    1cc2:	46 c0       	rjmp	.+140    	; 0x1d50 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	ff 96       	adiw	r30, 0x3f	; 63
    1cc8:	60 81       	ld	r22, Z
    1cca:	71 81       	ldd	r23, Z+1	; 0x01
    1ccc:	82 81       	ldd	r24, Z+2	; 0x02
    1cce:	93 81       	ldd	r25, Z+3	; 0x03
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	3f ef       	ldi	r19, 0xFF	; 255
    1cd4:	4f e7       	ldi	r20, 0x7F	; 127
    1cd6:	57 e4       	ldi	r21, 0x47	; 71
    1cd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	64 f5       	brge	.+88     	; 0x1d38 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	ed 5b       	subi	r30, 0xBD	; 189
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	60 81       	ld	r22, Z
    1ce8:	71 81       	ldd	r23, Z+1	; 0x01
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9e af       	std	Y+62, r25	; 0x3e
    1d0c:	8d af       	std	Y+61, r24	; 0x3d
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <LCD_displayCharacter+0x478>
    1d10:	89 e1       	ldi	r24, 0x19	; 25
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9c af       	std	Y+60, r25	; 0x3c
    1d16:	8b af       	std	Y+59, r24	; 0x3b
    1d18:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d1a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_displayCharacter+0x466>
    1d20:	9c af       	std	Y+60, r25	; 0x3c
    1d22:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d26:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9e af       	std	Y+62, r25	; 0x3e
    1d2c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d30:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <LCD_displayCharacter+0x45a>
    1d36:	16 c0       	rjmp	.+44     	; 0x1d64 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	fe 01       	movw	r30, r28
    1d3a:	ff 96       	adiw	r30, 0x3f	; 63
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9e af       	std	Y+62, r25	; 0x3e
    1d4e:	8d af       	std	Y+61, r24	; 0x3d
    1d50:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d52:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d54:	9a af       	std	Y+58, r25	; 0x3a
    1d56:	89 af       	std	Y+57, r24	; 0x39
    1d58:	89 ad       	ldd	r24, Y+57	; 0x39
    1d5a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <LCD_displayCharacter+0x4a6>
    1d60:	9a af       	std	Y+58, r25	; 0x3a
    1d62:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	62 e0       	ldi	r22, 0x02	; 2
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	a0 e8       	ldi	r26, 0x80	; 128
    1d74:	bf e3       	ldi	r27, 0x3F	; 63
    1d76:	8d ab       	std	Y+53, r24	; 0x35
    1d78:	9e ab       	std	Y+54, r25	; 0x36
    1d7a:	af ab       	std	Y+55, r26	; 0x37
    1d7c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d80:	7e a9       	ldd	r23, Y+54	; 0x36
    1d82:	8f a9       	ldd	r24, Y+55	; 0x37
    1d84:	98 ad       	ldd	r25, Y+56	; 0x38
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	4a e7       	ldi	r20, 0x7A	; 122
    1d8c:	53 e4       	ldi	r21, 0x43	; 67
    1d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	89 ab       	std	Y+49, r24	; 0x31
    1d98:	9a ab       	std	Y+50, r25	; 0x32
    1d9a:	ab ab       	std	Y+51, r26	; 0x33
    1d9c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1da0:	7a a9       	ldd	r23, Y+50	; 0x32
    1da2:	8b a9       	ldd	r24, Y+51	; 0x33
    1da4:	9c a9       	ldd	r25, Y+52	; 0x34
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e8       	ldi	r20, 0x80	; 128
    1dac:	5f e3       	ldi	r21, 0x3F	; 63
    1dae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db2:	88 23       	and	r24, r24
    1db4:	2c f4       	brge	.+10     	; 0x1dc0 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	98 ab       	std	Y+48, r25	; 0x30
    1dbc:	8f a7       	std	Y+47, r24	; 0x2f
    1dbe:	3f c0       	rjmp	.+126    	; 0x1e3e <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    1dc0:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc2:	7a a9       	ldd	r23, Y+50	; 0x32
    1dc4:	8b a9       	ldd	r24, Y+51	; 0x33
    1dc6:	9c a9       	ldd	r25, Y+52	; 0x34
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	3f ef       	ldi	r19, 0xFF	; 255
    1dcc:	4f e7       	ldi	r20, 0x7F	; 127
    1dce:	57 e4       	ldi	r21, 0x47	; 71
    1dd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd4:	18 16       	cp	r1, r24
    1dd6:	4c f5       	brge	.+82     	; 0x1e2a <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd8:	6d a9       	ldd	r22, Y+53	; 0x35
    1dda:	7e a9       	ldd	r23, Y+54	; 0x36
    1ddc:	8f a9       	ldd	r24, Y+55	; 0x37
    1dde:	98 ad       	ldd	r25, Y+56	; 0x38
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e2       	ldi	r20, 0x20	; 32
    1de6:	51 e4       	ldi	r21, 0x41	; 65
    1de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	bc 01       	movw	r22, r24
    1df2:	cd 01       	movw	r24, r26
    1df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	98 ab       	std	Y+48, r25	; 0x30
    1dfe:	8f a7       	std	Y+47, r24	; 0x2f
    1e00:	0f c0       	rjmp	.+30     	; 0x1e20 <LCD_displayCharacter+0x56a>
    1e02:	89 e1       	ldi	r24, 0x19	; 25
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9e a7       	std	Y+46, r25	; 0x2e
    1e08:	8d a7       	std	Y+45, r24	; 0x2d
    1e0a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e0c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	f1 f7       	brne	.-4      	; 0x1e0e <LCD_displayCharacter+0x558>
    1e12:	9e a7       	std	Y+46, r25	; 0x2e
    1e14:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e18:	98 a9       	ldd	r25, Y+48	; 0x30
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	98 ab       	std	Y+48, r25	; 0x30
    1e1e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e22:	98 a9       	ldd	r25, Y+48	; 0x30
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	69 f7       	brne	.-38     	; 0x1e02 <LCD_displayCharacter+0x54c>
    1e28:	14 c0       	rjmp	.+40     	; 0x1e52 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e30:	9c a9       	ldd	r25, Y+52	; 0x34
    1e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	98 ab       	std	Y+48, r25	; 0x30
    1e3c:	8f a7       	std	Y+47, r24	; 0x2f
    1e3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e40:	98 a9       	ldd	r25, Y+48	; 0x30
    1e42:	9c a7       	std	Y+44, r25	; 0x2c
    1e44:	8b a7       	std	Y+43, r24	; 0x2b
    1e46:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e48:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_displayCharacter+0x594>
    1e4e:	9c a7       	std	Y+44, r25	; 0x2c
    1e50:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	62 e0       	ldi	r22, 0x02	; 2
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	a0 e8       	ldi	r26, 0x80	; 128
    1e62:	bf e3       	ldi	r27, 0x3F	; 63
    1e64:	8f a3       	std	Y+39, r24	; 0x27
    1e66:	98 a7       	std	Y+40, r25	; 0x28
    1e68:	a9 a7       	std	Y+41, r26	; 0x29
    1e6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e6e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e70:	89 a5       	ldd	r24, Y+41	; 0x29
    1e72:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	4a e7       	ldi	r20, 0x7A	; 122
    1e7a:	53 e4       	ldi	r21, 0x43	; 67
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	8b a3       	std	Y+35, r24	; 0x23
    1e86:	9c a3       	std	Y+36, r25	; 0x24
    1e88:	ad a3       	std	Y+37, r26	; 0x25
    1e8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e90:	8d a1       	ldd	r24, Y+37	; 0x25
    1e92:	9e a1       	ldd	r25, Y+38	; 0x26
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea0:	88 23       	and	r24, r24
    1ea2:	2c f4       	brge	.+10     	; 0x1eae <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9a a3       	std	Y+34, r25	; 0x22
    1eaa:	89 a3       	std	Y+33, r24	; 0x21
    1eac:	3f c0       	rjmp	.+126    	; 0x1f2c <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    1eae:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb0:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb2:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb4:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	57 e4       	ldi	r21, 0x47	; 71
    1ebe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	4c f5       	brge	.+82     	; 0x1f18 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec8:	78 a5       	ldd	r23, Y+40	; 0x28
    1eca:	89 a5       	ldd	r24, Y+41	; 0x29
    1ecc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e2       	ldi	r20, 0x20	; 32
    1ed4:	51 e4       	ldi	r21, 0x41	; 65
    1ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	bc 01       	movw	r22, r24
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9a a3       	std	Y+34, r25	; 0x22
    1eec:	89 a3       	std	Y+33, r24	; 0x21
    1eee:	0f c0       	rjmp	.+30     	; 0x1f0e <LCD_displayCharacter+0x658>
    1ef0:	89 e1       	ldi	r24, 0x19	; 25
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	98 a3       	std	Y+32, r25	; 0x20
    1ef6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ef8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1efa:	98 a1       	ldd	r25, Y+32	; 0x20
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <LCD_displayCharacter+0x646>
    1f00:	98 a3       	std	Y+32, r25	; 0x20
    1f02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f04:	89 a1       	ldd	r24, Y+33	; 0x21
    1f06:	9a a1       	ldd	r25, Y+34	; 0x22
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	9a a3       	std	Y+34, r25	; 0x22
    1f0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f10:	9a a1       	ldd	r25, Y+34	; 0x22
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	69 f7       	brne	.-38     	; 0x1ef0 <LCD_displayCharacter+0x63a>
    1f16:	14 c0       	rjmp	.+40     	; 0x1f40 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f18:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9a a3       	std	Y+34, r25	; 0x22
    1f2a:	89 a3       	std	Y+33, r24	; 0x21
    1f2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f30:	9e 8f       	std	Y+30, r25	; 0x1e
    1f32:	8d 8f       	std	Y+29, r24	; 0x1d
    1f34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_displayCharacter+0x682>
    1f3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f3e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    1f40:	fe 01       	movw	r30, r28
    1f42:	ed 59       	subi	r30, 0x9D	; 157
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	80 81       	ld	r24, Z
    1f48:	98 2f       	mov	r25, r24
    1f4a:	91 70       	andi	r25, 0x01	; 1
    1f4c:	83 e0       	ldi	r24, 0x03	; 3
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	49 2f       	mov	r20, r25
    1f52:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    1f56:	fe 01       	movw	r30, r28
    1f58:	ed 59       	subi	r30, 0x9D	; 157
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	80 81       	ld	r24, Z
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	82 70       	andi	r24, 0x02	; 2
    1f64:	90 70       	andi	r25, 0x00	; 0
    1f66:	95 95       	asr	r25
    1f68:	87 95       	ror	r24
    1f6a:	98 2f       	mov	r25, r24
    1f6c:	83 e0       	ldi	r24, 0x03	; 3
    1f6e:	61 e0       	ldi	r22, 0x01	; 1
    1f70:	49 2f       	mov	r20, r25
    1f72:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    1f76:	fe 01       	movw	r30, r28
    1f78:	ed 59       	subi	r30, 0x9D	; 157
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	80 81       	ld	r24, Z
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	84 70       	andi	r24, 0x04	; 4
    1f84:	90 70       	andi	r25, 0x00	; 0
    1f86:	95 95       	asr	r25
    1f88:	87 95       	ror	r24
    1f8a:	95 95       	asr	r25
    1f8c:	87 95       	ror	r24
    1f8e:	98 2f       	mov	r25, r24
    1f90:	83 e0       	ldi	r24, 0x03	; 3
    1f92:	62 e0       	ldi	r22, 0x02	; 2
    1f94:	49 2f       	mov	r20, r25
    1f96:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	ed 59       	subi	r30, 0x9D	; 157
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	80 81       	ld	r24, Z
    1fa2:	88 2f       	mov	r24, r24
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	88 70       	andi	r24, 0x08	; 8
    1fa8:	90 70       	andi	r25, 0x00	; 0
    1faa:	95 95       	asr	r25
    1fac:	87 95       	ror	r24
    1fae:	95 95       	asr	r25
    1fb0:	87 95       	ror	r24
    1fb2:	95 95       	asr	r25
    1fb4:	87 95       	ror	r24
    1fb6:	98 2f       	mov	r25, r24
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	63 e0       	ldi	r22, 0x03	; 3
    1fbc:	49 2f       	mov	r20, r25
    1fbe:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e8       	ldi	r26, 0x80	; 128
    1fc8:	bf e3       	ldi	r27, 0x3F	; 63
    1fca:	89 8f       	std	Y+25, r24	; 0x19
    1fcc:	9a 8f       	std	Y+26, r25	; 0x1a
    1fce:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a e7       	ldi	r20, 0x7A	; 122
    1fe0:	53 e4       	ldi	r21, 0x43	; 67
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8d 8b       	std	Y+21, r24	; 0x15
    1fec:	9e 8b       	std	Y+22, r25	; 0x16
    1fee:	af 8b       	std	Y+23, r26	; 0x17
    1ff0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ff2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff8:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9c 8b       	std	Y+20, r25	; 0x14
    2010:	8b 8b       	std	Y+19, r24	; 0x13
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2014:	6d 89       	ldd	r22, Y+21	; 0x15
    2016:	7e 89       	ldd	r23, Y+22	; 0x16
    2018:	8f 89       	ldd	r24, Y+23	; 0x17
    201a:	98 8d       	ldd	r25, Y+24	; 0x18
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	69 8d       	ldd	r22, Y+25	; 0x19
    202e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2030:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2032:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9c 8b       	std	Y+20, r25	; 0x14
    2052:	8b 8b       	std	Y+19, r24	; 0x13
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <LCD_displayCharacter+0x7be>
    2056:	89 e1       	ldi	r24, 0x19	; 25
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9a 8b       	std	Y+18, r25	; 0x12
    205c:	89 8b       	std	Y+17, r24	; 0x11
    205e:	89 89       	ldd	r24, Y+17	; 0x11
    2060:	9a 89       	ldd	r25, Y+18	; 0x12
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_displayCharacter+0x7ac>
    2066:	9a 8b       	std	Y+18, r25	; 0x12
    2068:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8b 89       	ldd	r24, Y+19	; 0x13
    206c:	9c 89       	ldd	r25, Y+20	; 0x14
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9c 8b       	std	Y+20, r25	; 0x14
    2072:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8b 89       	ldd	r24, Y+19	; 0x13
    2076:	9c 89       	ldd	r25, Y+20	; 0x14
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <LCD_displayCharacter+0x7a0>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6d 89       	ldd	r22, Y+21	; 0x15
    2080:	7e 89       	ldd	r23, Y+22	; 0x16
    2082:	8f 89       	ldd	r24, Y+23	; 0x17
    2084:	98 8d       	ldd	r25, Y+24	; 0x18
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9c 8b       	std	Y+20, r25	; 0x14
    2090:	8b 8b       	std	Y+19, r24	; 0x13
    2092:	8b 89       	ldd	r24, Y+19	; 0x13
    2094:	9c 89       	ldd	r25, Y+20	; 0x14
    2096:	98 8b       	std	Y+16, r25	; 0x10
    2098:	8f 87       	std	Y+15, r24	; 0x0f
    209a:	8f 85       	ldd	r24, Y+15	; 0x0f
    209c:	98 89       	ldd	r25, Y+16	; 0x10
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_displayCharacter+0x7e8>
    20a2:	98 8b       	std	Y+16, r25	; 0x10
    20a4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	62 e0       	ldi	r22, 0x02	; 2
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	0e 94 72 12 	call	0x24e4	; 0x24e4 <GPIO_writePin>
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	a0 e8       	ldi	r26, 0x80	; 128
    20b6:	bf e3       	ldi	r27, 0x3F	; 63
    20b8:	8b 87       	std	Y+11, r24	; 0x0b
    20ba:	9c 87       	std	Y+12, r25	; 0x0c
    20bc:	ad 87       	std	Y+13, r26	; 0x0d
    20be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4a e7       	ldi	r20, 0x7A	; 122
    20ce:	53 e4       	ldi	r21, 0x43	; 67
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	8f 83       	std	Y+7, r24	; 0x07
    20da:	98 87       	std	Y+8, r25	; 0x08
    20dc:	a9 87       	std	Y+9, r26	; 0x09
    20de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e0:	6f 81       	ldd	r22, Y+7	; 0x07
    20e2:	78 85       	ldd	r23, Y+8	; 0x08
    20e4:	89 85       	ldd	r24, Y+9	; 0x09
    20e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e8       	ldi	r20, 0x80	; 128
    20ee:	5f e3       	ldi	r21, 0x3F	; 63
    20f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f4:	88 23       	and	r24, r24
    20f6:	2c f4       	brge	.+10     	; 0x2102 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	3f c0       	rjmp	.+126    	; 0x2180 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2102:	6f 81       	ldd	r22, Y+7	; 0x07
    2104:	78 85       	ldd	r23, Y+8	; 0x08
    2106:	89 85       	ldd	r24, Y+9	; 0x09
    2108:	9a 85       	ldd	r25, Y+10	; 0x0a
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	3f ef       	ldi	r19, 0xFF	; 255
    210e:	4f e7       	ldi	r20, 0x7F	; 127
    2110:	57 e4       	ldi	r21, 0x47	; 71
    2112:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2116:	18 16       	cp	r1, r24
    2118:	4c f5       	brge	.+82     	; 0x216c <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211a:	6b 85       	ldd	r22, Y+11	; 0x0b
    211c:	7c 85       	ldd	r23, Y+12	; 0x0c
    211e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2120:	9e 85       	ldd	r25, Y+14	; 0x0e
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e2       	ldi	r20, 0x20	; 32
    2128:	51 e4       	ldi	r21, 0x41	; 65
    212a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	bc 01       	movw	r22, r24
    2134:	cd 01       	movw	r24, r26
    2136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
    2142:	0f c0       	rjmp	.+30     	; 0x2162 <LCD_displayCharacter+0x8ac>
    2144:	89 e1       	ldi	r24, 0x19	; 25
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9c 83       	std	Y+4, r25	; 0x04
    214a:	8b 83       	std	Y+3, r24	; 0x03
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <LCD_displayCharacter+0x89a>
    2154:	9c 83       	std	Y+4, r25	; 0x04
    2156:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	69 f7       	brne	.-38     	; 0x2144 <LCD_displayCharacter+0x88e>
    216a:	14 c0       	rjmp	.+40     	; 0x2194 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216c:	6f 81       	ldd	r22, Y+7	; 0x07
    216e:	78 85       	ldd	r23, Y+8	; 0x08
    2170:	89 85       	ldd	r24, Y+9	; 0x09
    2172:	9a 85       	ldd	r25, Y+10	; 0x0a
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9e 83       	std	Y+6, r25	; 0x06
    217e:	8d 83       	std	Y+5, r24	; 0x05
    2180:	8d 81       	ldd	r24, Y+5	; 0x05
    2182:	9e 81       	ldd	r25, Y+6	; 0x06
    2184:	9a 83       	std	Y+2, r25	; 0x02
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <LCD_displayCharacter+0x8d6>
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2194:	cd 59       	subi	r28, 0x9D	; 157
    2196:	df 4f       	sbci	r29, 0xFF	; 255
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	08 95       	ret

000021ac <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <LCD_displayString+0x6>
    21b2:	0f 92       	push	r0
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	9b 83       	std	Y+3, r25	; 0x03
    21ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21bc:	19 82       	std	Y+1, r1	; 0x01
    21be:	0e c0       	rjmp	.+28     	; 0x21dc <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ca:	fc 01       	movw	r30, r24
    21cc:	e2 0f       	add	r30, r18
    21ce:	f3 1f       	adc	r31, r19
    21d0:	80 81       	ld	r24, Z
    21d2:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <LCD_displayCharacter>
		i++;
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	8f 5f       	subi	r24, 0xFF	; 255
    21da:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	9b 81       	ldd	r25, Y+3	; 0x03
    21e6:	fc 01       	movw	r30, r24
    21e8:	e2 0f       	add	r30, r18
    21ea:	f3 1f       	adc	r31, r19
    21ec:	80 81       	ld	r24, Z
    21ee:	88 23       	and	r24, r24
    21f0:	39 f7       	brne	.-50     	; 0x21c0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	00 d0       	rcall	.+0      	; 0x2204 <LCD_moveCursor+0x6>
    2204:	00 d0       	rcall	.+0      	; 0x2206 <LCD_moveCursor+0x8>
    2206:	0f 92       	push	r0
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	8a 83       	std	Y+2, r24	; 0x02
    220e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	3d 83       	std	Y+5, r19	; 0x05
    2218:	2c 83       	std	Y+4, r18	; 0x04
    221a:	8c 81       	ldd	r24, Y+4	; 0x04
    221c:	9d 81       	ldd	r25, Y+5	; 0x05
    221e:	81 30       	cpi	r24, 0x01	; 1
    2220:	91 05       	cpc	r25, r1
    2222:	c1 f0       	breq	.+48     	; 0x2254 <LCD_moveCursor+0x56>
    2224:	2c 81       	ldd	r18, Y+4	; 0x04
    2226:	3d 81       	ldd	r19, Y+5	; 0x05
    2228:	22 30       	cpi	r18, 0x02	; 2
    222a:	31 05       	cpc	r19, r1
    222c:	2c f4       	brge	.+10     	; 0x2238 <LCD_moveCursor+0x3a>
    222e:	8c 81       	ldd	r24, Y+4	; 0x04
    2230:	9d 81       	ldd	r25, Y+5	; 0x05
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	61 f0       	breq	.+24     	; 0x224e <LCD_moveCursor+0x50>
    2236:	19 c0       	rjmp	.+50     	; 0x226a <LCD_moveCursor+0x6c>
    2238:	2c 81       	ldd	r18, Y+4	; 0x04
    223a:	3d 81       	ldd	r19, Y+5	; 0x05
    223c:	22 30       	cpi	r18, 0x02	; 2
    223e:	31 05       	cpc	r19, r1
    2240:	69 f0       	breq	.+26     	; 0x225c <LCD_moveCursor+0x5e>
    2242:	8c 81       	ldd	r24, Y+4	; 0x04
    2244:	9d 81       	ldd	r25, Y+5	; 0x05
    2246:	83 30       	cpi	r24, 0x03	; 3
    2248:	91 05       	cpc	r25, r1
    224a:	61 f0       	breq	.+24     	; 0x2264 <LCD_moveCursor+0x66>
    224c:	0e c0       	rjmp	.+28     	; 0x226a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	0b c0       	rjmp	.+22     	; 0x226a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	80 5c       	subi	r24, 0xC0	; 192
    2258:	89 83       	std	Y+1, r24	; 0x01
    225a:	07 c0       	rjmp	.+14     	; 0x226a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	80 5f       	subi	r24, 0xF0	; 240
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	03 c0       	rjmp	.+6      	; 0x226a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	80 5b       	subi	r24, 0xB0	; 176
    2268:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	80 68       	ori	r24, 0x80	; 128
    226e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <LCD_sendCommand>
}
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	00 d0       	rcall	.+0      	; 0x2288 <LCD_displayStringRowColumn+0x6>
    2288:	00 d0       	rcall	.+0      	; 0x228a <LCD_displayStringRowColumn+0x8>
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	6a 83       	std	Y+2, r22	; 0x02
    2292:	5c 83       	std	Y+4, r21	; 0x04
    2294:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	6a 81       	ldd	r22, Y+2	; 0x02
    229a:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9c 81       	ldd	r25, Y+4	; 0x04
    22a2:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LCD_displayString>
}
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	62 97       	sbiw	r28, 0x12	; 18
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	9a 8b       	std	Y+18, r25	; 0x12
    22ca:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    22cc:	89 89       	ldd	r24, Y+17	; 0x11
    22ce:	9a 89       	ldd	r25, Y+18	; 0x12
    22d0:	9e 01       	movw	r18, r28
    22d2:	2f 5f       	subi	r18, 0xFF	; 255
    22d4:	3f 4f       	sbci	r19, 0xFF	; 255
    22d6:	b9 01       	movw	r22, r18
    22d8:	4a e0       	ldi	r20, 0x0A	; 10
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	0e 94 65 17 	call	0x2eca	; 0x2eca <itoa>
   LCD_displayString(buff); /* Display the string */
    22e0:	ce 01       	movw	r24, r28
    22e2:	01 96       	adiw	r24, 0x01	; 1
    22e4:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LCD_displayString>
}
    22e8:	62 96       	adiw	r28, 0x12	; 18
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <LCD_sendCommand>
}
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	00 d0       	rcall	.+0      	; 0x2314 <GPIO_setupPinDirection+0x6>
    2314:	00 d0       	rcall	.+0      	; 0x2316 <GPIO_setupPinDirection+0x8>
    2316:	0f 92       	push	r0
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	6a 83       	std	Y+2, r22	; 0x02
    2320:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	88 30       	cpi	r24, 0x08	; 8
    2326:	08 f0       	brcs	.+2      	; 0x232a <GPIO_setupPinDirection+0x1c>
    2328:	d5 c0       	rjmp	.+426    	; 0x24d4 <GPIO_setupPinDirection+0x1c6>
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	84 30       	cpi	r24, 0x04	; 4
    232e:	08 f0       	brcs	.+2      	; 0x2332 <GPIO_setupPinDirection+0x24>
    2330:	d1 c0       	rjmp	.+418    	; 0x24d4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	3d 83       	std	Y+5, r19	; 0x05
    233a:	2c 83       	std	Y+4, r18	; 0x04
    233c:	8c 81       	ldd	r24, Y+4	; 0x04
    233e:	9d 81       	ldd	r25, Y+5	; 0x05
    2340:	81 30       	cpi	r24, 0x01	; 1
    2342:	91 05       	cpc	r25, r1
    2344:	09 f4       	brne	.+2      	; 0x2348 <GPIO_setupPinDirection+0x3a>
    2346:	43 c0       	rjmp	.+134    	; 0x23ce <GPIO_setupPinDirection+0xc0>
    2348:	2c 81       	ldd	r18, Y+4	; 0x04
    234a:	3d 81       	ldd	r19, Y+5	; 0x05
    234c:	22 30       	cpi	r18, 0x02	; 2
    234e:	31 05       	cpc	r19, r1
    2350:	2c f4       	brge	.+10     	; 0x235c <GPIO_setupPinDirection+0x4e>
    2352:	8c 81       	ldd	r24, Y+4	; 0x04
    2354:	9d 81       	ldd	r25, Y+5	; 0x05
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	71 f0       	breq	.+28     	; 0x2376 <GPIO_setupPinDirection+0x68>
    235a:	bc c0       	rjmp	.+376    	; 0x24d4 <GPIO_setupPinDirection+0x1c6>
    235c:	2c 81       	ldd	r18, Y+4	; 0x04
    235e:	3d 81       	ldd	r19, Y+5	; 0x05
    2360:	22 30       	cpi	r18, 0x02	; 2
    2362:	31 05       	cpc	r19, r1
    2364:	09 f4       	brne	.+2      	; 0x2368 <GPIO_setupPinDirection+0x5a>
    2366:	5f c0       	rjmp	.+190    	; 0x2426 <GPIO_setupPinDirection+0x118>
    2368:	8c 81       	ldd	r24, Y+4	; 0x04
    236a:	9d 81       	ldd	r25, Y+5	; 0x05
    236c:	83 30       	cpi	r24, 0x03	; 3
    236e:	91 05       	cpc	r25, r1
    2370:	09 f4       	brne	.+2      	; 0x2374 <GPIO_setupPinDirection+0x66>
    2372:	85 c0       	rjmp	.+266    	; 0x247e <GPIO_setupPinDirection+0x170>
    2374:	af c0       	rjmp	.+350    	; 0x24d4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	81 30       	cpi	r24, 0x01	; 1
    237a:	a1 f4       	brne	.+40     	; 0x23a4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    237c:	aa e3       	ldi	r26, 0x3A	; 58
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	ea e3       	ldi	r30, 0x3A	; 58
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	48 2f       	mov	r20, r24
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	02 2e       	mov	r0, r18
    2394:	02 c0       	rjmp	.+4      	; 0x239a <GPIO_setupPinDirection+0x8c>
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	0a 94       	dec	r0
    239c:	e2 f7       	brpl	.-8      	; 0x2396 <GPIO_setupPinDirection+0x88>
    239e:	84 2b       	or	r24, r20
    23a0:	8c 93       	st	X, r24
    23a2:	98 c0       	rjmp	.+304    	; 0x24d4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    23a4:	aa e3       	ldi	r26, 0x3A	; 58
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	ea e3       	ldi	r30, 0x3A	; 58
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	48 2f       	mov	r20, r24
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	02 2e       	mov	r0, r18
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <GPIO_setupPinDirection+0xb4>
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	0a 94       	dec	r0
    23c4:	e2 f7       	brpl	.-8      	; 0x23be <GPIO_setupPinDirection+0xb0>
    23c6:	80 95       	com	r24
    23c8:	84 23       	and	r24, r20
    23ca:	8c 93       	st	X, r24
    23cc:	83 c0       	rjmp	.+262    	; 0x24d4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	81 30       	cpi	r24, 0x01	; 1
    23d2:	a1 f4       	brne	.+40     	; 0x23fc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    23d4:	a7 e3       	ldi	r26, 0x37	; 55
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e7 e3       	ldi	r30, 0x37	; 55
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	48 2f       	mov	r20, r24
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	02 2e       	mov	r0, r18
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <GPIO_setupPinDirection+0xe4>
    23ee:	88 0f       	add	r24, r24
    23f0:	99 1f       	adc	r25, r25
    23f2:	0a 94       	dec	r0
    23f4:	e2 f7       	brpl	.-8      	; 0x23ee <GPIO_setupPinDirection+0xe0>
    23f6:	84 2b       	or	r24, r20
    23f8:	8c 93       	st	X, r24
    23fa:	6c c0       	rjmp	.+216    	; 0x24d4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    23fc:	a7 e3       	ldi	r26, 0x37	; 55
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e7 e3       	ldi	r30, 0x37	; 55
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	48 2f       	mov	r20, r24
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	28 2f       	mov	r18, r24
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	02 2e       	mov	r0, r18
    2414:	02 c0       	rjmp	.+4      	; 0x241a <GPIO_setupPinDirection+0x10c>
    2416:	88 0f       	add	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	0a 94       	dec	r0
    241c:	e2 f7       	brpl	.-8      	; 0x2416 <GPIO_setupPinDirection+0x108>
    241e:	80 95       	com	r24
    2420:	84 23       	and	r24, r20
    2422:	8c 93       	st	X, r24
    2424:	57 c0       	rjmp	.+174    	; 0x24d4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	81 30       	cpi	r24, 0x01	; 1
    242a:	a1 f4       	brne	.+40     	; 0x2454 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    242c:	a4 e3       	ldi	r26, 0x34	; 52
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e4 e3       	ldi	r30, 0x34	; 52
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	48 2f       	mov	r20, r24
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	02 2e       	mov	r0, r18
    2444:	02 c0       	rjmp	.+4      	; 0x244a <GPIO_setupPinDirection+0x13c>
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	0a 94       	dec	r0
    244c:	e2 f7       	brpl	.-8      	; 0x2446 <GPIO_setupPinDirection+0x138>
    244e:	84 2b       	or	r24, r20
    2450:	8c 93       	st	X, r24
    2452:	40 c0       	rjmp	.+128    	; 0x24d4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2454:	a4 e3       	ldi	r26, 0x34	; 52
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	e4 e3       	ldi	r30, 0x34	; 52
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	48 2f       	mov	r20, r24
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	02 2e       	mov	r0, r18
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <GPIO_setupPinDirection+0x164>
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	0a 94       	dec	r0
    2474:	e2 f7       	brpl	.-8      	; 0x246e <GPIO_setupPinDirection+0x160>
    2476:	80 95       	com	r24
    2478:	84 23       	and	r24, r20
    247a:	8c 93       	st	X, r24
    247c:	2b c0       	rjmp	.+86     	; 0x24d4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	81 30       	cpi	r24, 0x01	; 1
    2482:	a1 f4       	brne	.+40     	; 0x24ac <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2484:	a1 e3       	ldi	r26, 0x31	; 49
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e1 e3       	ldi	r30, 0x31	; 49
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	48 2f       	mov	r20, r24
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	02 2e       	mov	r0, r18
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <GPIO_setupPinDirection+0x194>
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	0a 94       	dec	r0
    24a4:	e2 f7       	brpl	.-8      	; 0x249e <GPIO_setupPinDirection+0x190>
    24a6:	84 2b       	or	r24, r20
    24a8:	8c 93       	st	X, r24
    24aa:	14 c0       	rjmp	.+40     	; 0x24d4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    24ac:	a1 e3       	ldi	r26, 0x31	; 49
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e1 e3       	ldi	r30, 0x31	; 49
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	48 2f       	mov	r20, r24
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	02 2e       	mov	r0, r18
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <GPIO_setupPinDirection+0x1bc>
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	0a 94       	dec	r0
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <GPIO_setupPinDirection+0x1b8>
    24ce:	80 95       	com	r24
    24d0:	84 23       	and	r24, r20
    24d2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <GPIO_writePin+0x6>
    24ea:	00 d0       	rcall	.+0      	; 0x24ec <GPIO_writePin+0x8>
    24ec:	0f 92       	push	r0
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	6a 83       	std	Y+2, r22	; 0x02
    24f6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	88 30       	cpi	r24, 0x08	; 8
    24fc:	08 f0       	brcs	.+2      	; 0x2500 <GPIO_writePin+0x1c>
    24fe:	d5 c0       	rjmp	.+426    	; 0x26aa <GPIO_writePin+0x1c6>
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	84 30       	cpi	r24, 0x04	; 4
    2504:	08 f0       	brcs	.+2      	; 0x2508 <GPIO_writePin+0x24>
    2506:	d1 c0       	rjmp	.+418    	; 0x26aa <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	3d 83       	std	Y+5, r19	; 0x05
    2510:	2c 83       	std	Y+4, r18	; 0x04
    2512:	8c 81       	ldd	r24, Y+4	; 0x04
    2514:	9d 81       	ldd	r25, Y+5	; 0x05
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	91 05       	cpc	r25, r1
    251a:	09 f4       	brne	.+2      	; 0x251e <GPIO_writePin+0x3a>
    251c:	43 c0       	rjmp	.+134    	; 0x25a4 <GPIO_writePin+0xc0>
    251e:	2c 81       	ldd	r18, Y+4	; 0x04
    2520:	3d 81       	ldd	r19, Y+5	; 0x05
    2522:	22 30       	cpi	r18, 0x02	; 2
    2524:	31 05       	cpc	r19, r1
    2526:	2c f4       	brge	.+10     	; 0x2532 <GPIO_writePin+0x4e>
    2528:	8c 81       	ldd	r24, Y+4	; 0x04
    252a:	9d 81       	ldd	r25, Y+5	; 0x05
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	71 f0       	breq	.+28     	; 0x254c <GPIO_writePin+0x68>
    2530:	bc c0       	rjmp	.+376    	; 0x26aa <GPIO_writePin+0x1c6>
    2532:	2c 81       	ldd	r18, Y+4	; 0x04
    2534:	3d 81       	ldd	r19, Y+5	; 0x05
    2536:	22 30       	cpi	r18, 0x02	; 2
    2538:	31 05       	cpc	r19, r1
    253a:	09 f4       	brne	.+2      	; 0x253e <GPIO_writePin+0x5a>
    253c:	5f c0       	rjmp	.+190    	; 0x25fc <GPIO_writePin+0x118>
    253e:	8c 81       	ldd	r24, Y+4	; 0x04
    2540:	9d 81       	ldd	r25, Y+5	; 0x05
    2542:	83 30       	cpi	r24, 0x03	; 3
    2544:	91 05       	cpc	r25, r1
    2546:	09 f4       	brne	.+2      	; 0x254a <GPIO_writePin+0x66>
    2548:	85 c0       	rjmp	.+266    	; 0x2654 <GPIO_writePin+0x170>
    254a:	af c0       	rjmp	.+350    	; 0x26aa <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	a1 f4       	brne	.+40     	; 0x257a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2552:	ab e3       	ldi	r26, 0x3B	; 59
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	eb e3       	ldi	r30, 0x3B	; 59
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	48 2f       	mov	r20, r24
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	02 2e       	mov	r0, r18
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <GPIO_writePin+0x8c>
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	0a 94       	dec	r0
    2572:	e2 f7       	brpl	.-8      	; 0x256c <GPIO_writePin+0x88>
    2574:	84 2b       	or	r24, r20
    2576:	8c 93       	st	X, r24
    2578:	98 c0       	rjmp	.+304    	; 0x26aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    257a:	ab e3       	ldi	r26, 0x3B	; 59
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	eb e3       	ldi	r30, 0x3B	; 59
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	48 2f       	mov	r20, r24
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	02 2e       	mov	r0, r18
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <GPIO_writePin+0xb4>
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	0a 94       	dec	r0
    259a:	e2 f7       	brpl	.-8      	; 0x2594 <GPIO_writePin+0xb0>
    259c:	80 95       	com	r24
    259e:	84 23       	and	r24, r20
    25a0:	8c 93       	st	X, r24
    25a2:	83 c0       	rjmp	.+262    	; 0x26aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	81 30       	cpi	r24, 0x01	; 1
    25a8:	a1 f4       	brne	.+40     	; 0x25d2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    25aa:	a8 e3       	ldi	r26, 0x38	; 56
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e8 e3       	ldi	r30, 0x38	; 56
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	48 2f       	mov	r20, r24
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	02 2e       	mov	r0, r18
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <GPIO_writePin+0xe4>
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	0a 94       	dec	r0
    25ca:	e2 f7       	brpl	.-8      	; 0x25c4 <GPIO_writePin+0xe0>
    25cc:	84 2b       	or	r24, r20
    25ce:	8c 93       	st	X, r24
    25d0:	6c c0       	rjmp	.+216    	; 0x26aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    25d2:	a8 e3       	ldi	r26, 0x38	; 56
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e8 e3       	ldi	r30, 0x38	; 56
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	48 2f       	mov	r20, r24
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	02 2e       	mov	r0, r18
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <GPIO_writePin+0x10c>
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	0a 94       	dec	r0
    25f2:	e2 f7       	brpl	.-8      	; 0x25ec <GPIO_writePin+0x108>
    25f4:	80 95       	com	r24
    25f6:	84 23       	and	r24, r20
    25f8:	8c 93       	st	X, r24
    25fa:	57 c0       	rjmp	.+174    	; 0x26aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
    25fe:	81 30       	cpi	r24, 0x01	; 1
    2600:	a1 f4       	brne	.+40     	; 0x262a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2602:	a5 e3       	ldi	r26, 0x35	; 53
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	e5 e3       	ldi	r30, 0x35	; 53
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	48 2f       	mov	r20, r24
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	02 2e       	mov	r0, r18
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <GPIO_writePin+0x13c>
    261c:	88 0f       	add	r24, r24
    261e:	99 1f       	adc	r25, r25
    2620:	0a 94       	dec	r0
    2622:	e2 f7       	brpl	.-8      	; 0x261c <GPIO_writePin+0x138>
    2624:	84 2b       	or	r24, r20
    2626:	8c 93       	st	X, r24
    2628:	40 c0       	rjmp	.+128    	; 0x26aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    262a:	a5 e3       	ldi	r26, 0x35	; 53
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e5 e3       	ldi	r30, 0x35	; 53
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	48 2f       	mov	r20, r24
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	02 2e       	mov	r0, r18
    2642:	02 c0       	rjmp	.+4      	; 0x2648 <GPIO_writePin+0x164>
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	0a 94       	dec	r0
    264a:	e2 f7       	brpl	.-8      	; 0x2644 <GPIO_writePin+0x160>
    264c:	80 95       	com	r24
    264e:	84 23       	and	r24, r20
    2650:	8c 93       	st	X, r24
    2652:	2b c0       	rjmp	.+86     	; 0x26aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	81 30       	cpi	r24, 0x01	; 1
    2658:	a1 f4       	brne	.+40     	; 0x2682 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    265a:	a2 e3       	ldi	r26, 0x32	; 50
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e2 e3       	ldi	r30, 0x32	; 50
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	48 2f       	mov	r20, r24
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	28 2f       	mov	r18, r24
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	02 2e       	mov	r0, r18
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <GPIO_writePin+0x194>
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	0a 94       	dec	r0
    267a:	e2 f7       	brpl	.-8      	; 0x2674 <GPIO_writePin+0x190>
    267c:	84 2b       	or	r24, r20
    267e:	8c 93       	st	X, r24
    2680:	14 c0       	rjmp	.+40     	; 0x26aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2682:	a2 e3       	ldi	r26, 0x32	; 50
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	e2 e3       	ldi	r30, 0x32	; 50
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	48 2f       	mov	r20, r24
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	02 2e       	mov	r0, r18
    269a:	02 c0       	rjmp	.+4      	; 0x26a0 <GPIO_writePin+0x1bc>
    269c:	88 0f       	add	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	0a 94       	dec	r0
    26a2:	e2 f7       	brpl	.-8      	; 0x269c <GPIO_writePin+0x1b8>
    26a4:	80 95       	com	r24
    26a6:	84 23       	and	r24, r20
    26a8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <GPIO_readPin+0x6>
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <GPIO_readPin+0x8>
    26c2:	0f 92       	push	r0
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	8a 83       	std	Y+2, r24	; 0x02
    26ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    26cc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	88 30       	cpi	r24, 0x08	; 8
    26d2:	08 f0       	brcs	.+2      	; 0x26d6 <GPIO_readPin+0x1c>
    26d4:	84 c0       	rjmp	.+264    	; 0x27de <GPIO_readPin+0x124>
    26d6:	8a 81       	ldd	r24, Y+2	; 0x02
    26d8:	84 30       	cpi	r24, 0x04	; 4
    26da:	08 f0       	brcs	.+2      	; 0x26de <GPIO_readPin+0x24>
    26dc:	80 c0       	rjmp	.+256    	; 0x27de <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    26de:	8a 81       	ldd	r24, Y+2	; 0x02
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	3d 83       	std	Y+5, r19	; 0x05
    26e6:	2c 83       	std	Y+4, r18	; 0x04
    26e8:	4c 81       	ldd	r20, Y+4	; 0x04
    26ea:	5d 81       	ldd	r21, Y+5	; 0x05
    26ec:	41 30       	cpi	r20, 0x01	; 1
    26ee:	51 05       	cpc	r21, r1
    26f0:	79 f1       	breq	.+94     	; 0x2750 <GPIO_readPin+0x96>
    26f2:	8c 81       	ldd	r24, Y+4	; 0x04
    26f4:	9d 81       	ldd	r25, Y+5	; 0x05
    26f6:	82 30       	cpi	r24, 0x02	; 2
    26f8:	91 05       	cpc	r25, r1
    26fa:	34 f4       	brge	.+12     	; 0x2708 <GPIO_readPin+0x4e>
    26fc:	2c 81       	ldd	r18, Y+4	; 0x04
    26fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2700:	21 15       	cp	r18, r1
    2702:	31 05       	cpc	r19, r1
    2704:	69 f0       	breq	.+26     	; 0x2720 <GPIO_readPin+0x66>
    2706:	6b c0       	rjmp	.+214    	; 0x27de <GPIO_readPin+0x124>
    2708:	4c 81       	ldd	r20, Y+4	; 0x04
    270a:	5d 81       	ldd	r21, Y+5	; 0x05
    270c:	42 30       	cpi	r20, 0x02	; 2
    270e:	51 05       	cpc	r21, r1
    2710:	b9 f1       	breq	.+110    	; 0x2780 <GPIO_readPin+0xc6>
    2712:	8c 81       	ldd	r24, Y+4	; 0x04
    2714:	9d 81       	ldd	r25, Y+5	; 0x05
    2716:	83 30       	cpi	r24, 0x03	; 3
    2718:	91 05       	cpc	r25, r1
    271a:	09 f4       	brne	.+2      	; 0x271e <GPIO_readPin+0x64>
    271c:	49 c0       	rjmp	.+146    	; 0x27b0 <GPIO_readPin+0xf6>
    271e:	5f c0       	rjmp	.+190    	; 0x27de <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2720:	e9 e3       	ldi	r30, 0x39	; 57
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	8b 81       	ldd	r24, Y+3	; 0x03
    272c:	88 2f       	mov	r24, r24
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	a9 01       	movw	r20, r18
    2732:	02 c0       	rjmp	.+4      	; 0x2738 <GPIO_readPin+0x7e>
    2734:	55 95       	asr	r21
    2736:	47 95       	ror	r20
    2738:	8a 95       	dec	r24
    273a:	e2 f7       	brpl	.-8      	; 0x2734 <GPIO_readPin+0x7a>
    273c:	ca 01       	movw	r24, r20
    273e:	81 70       	andi	r24, 0x01	; 1
    2740:	90 70       	andi	r25, 0x00	; 0
    2742:	88 23       	and	r24, r24
    2744:	19 f0       	breq	.+6      	; 0x274c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	89 83       	std	Y+1, r24	; 0x01
    274a:	49 c0       	rjmp	.+146    	; 0x27de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    274c:	19 82       	std	Y+1, r1	; 0x01
    274e:	47 c0       	rjmp	.+142    	; 0x27de <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2750:	e6 e3       	ldi	r30, 0x36	; 54
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	88 2f       	mov	r24, r24
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	a9 01       	movw	r20, r18
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <GPIO_readPin+0xae>
    2764:	55 95       	asr	r21
    2766:	47 95       	ror	r20
    2768:	8a 95       	dec	r24
    276a:	e2 f7       	brpl	.-8      	; 0x2764 <GPIO_readPin+0xaa>
    276c:	ca 01       	movw	r24, r20
    276e:	81 70       	andi	r24, 0x01	; 1
    2770:	90 70       	andi	r25, 0x00	; 0
    2772:	88 23       	and	r24, r24
    2774:	19 f0       	breq	.+6      	; 0x277c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	31 c0       	rjmp	.+98     	; 0x27de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    277c:	19 82       	std	Y+1, r1	; 0x01
    277e:	2f c0       	rjmp	.+94     	; 0x27de <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2780:	e3 e3       	ldi	r30, 0x33	; 51
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	28 2f       	mov	r18, r24
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	88 2f       	mov	r24, r24
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	a9 01       	movw	r20, r18
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <GPIO_readPin+0xde>
    2794:	55 95       	asr	r21
    2796:	47 95       	ror	r20
    2798:	8a 95       	dec	r24
    279a:	e2 f7       	brpl	.-8      	; 0x2794 <GPIO_readPin+0xda>
    279c:	ca 01       	movw	r24, r20
    279e:	81 70       	andi	r24, 0x01	; 1
    27a0:	90 70       	andi	r25, 0x00	; 0
    27a2:	88 23       	and	r24, r24
    27a4:	19 f0       	breq	.+6      	; 0x27ac <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	19 c0       	rjmp	.+50     	; 0x27de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    27ac:	19 82       	std	Y+1, r1	; 0x01
    27ae:	17 c0       	rjmp	.+46     	; 0x27de <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    27b0:	e0 e3       	ldi	r30, 0x30	; 48
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	88 2f       	mov	r24, r24
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	a9 01       	movw	r20, r18
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <GPIO_readPin+0x10e>
    27c4:	55 95       	asr	r21
    27c6:	47 95       	ror	r20
    27c8:	8a 95       	dec	r24
    27ca:	e2 f7       	brpl	.-8      	; 0x27c4 <GPIO_readPin+0x10a>
    27cc:	ca 01       	movw	r24, r20
    27ce:	81 70       	andi	r24, 0x01	; 1
    27d0:	90 70       	andi	r25, 0x00	; 0
    27d2:	88 23       	and	r24, r24
    27d4:	19 f0       	breq	.+6      	; 0x27dc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	89 83       	std	Y+1, r24	; 0x01
    27da:	01 c0       	rjmp	.+2      	; 0x27de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    27dc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    27de:	89 81       	ldd	r24, Y+1	; 0x01
}
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	08 95       	ret

000027f0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	00 d0       	rcall	.+0      	; 0x27f6 <GPIO_setupPortDirection+0x6>
    27f6:	00 d0       	rcall	.+0      	; 0x27f8 <GPIO_setupPortDirection+0x8>
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	89 83       	std	Y+1, r24	; 0x01
    27fe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	84 30       	cpi	r24, 0x04	; 4
    2804:	90 f5       	brcc	.+100    	; 0x286a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	3c 83       	std	Y+4, r19	; 0x04
    280e:	2b 83       	std	Y+3, r18	; 0x03
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	9c 81       	ldd	r25, Y+4	; 0x04
    2814:	81 30       	cpi	r24, 0x01	; 1
    2816:	91 05       	cpc	r25, r1
    2818:	d1 f0       	breq	.+52     	; 0x284e <GPIO_setupPortDirection+0x5e>
    281a:	2b 81       	ldd	r18, Y+3	; 0x03
    281c:	3c 81       	ldd	r19, Y+4	; 0x04
    281e:	22 30       	cpi	r18, 0x02	; 2
    2820:	31 05       	cpc	r19, r1
    2822:	2c f4       	brge	.+10     	; 0x282e <GPIO_setupPortDirection+0x3e>
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	9c 81       	ldd	r25, Y+4	; 0x04
    2828:	00 97       	sbiw	r24, 0x00	; 0
    282a:	61 f0       	breq	.+24     	; 0x2844 <GPIO_setupPortDirection+0x54>
    282c:	1e c0       	rjmp	.+60     	; 0x286a <GPIO_setupPortDirection+0x7a>
    282e:	2b 81       	ldd	r18, Y+3	; 0x03
    2830:	3c 81       	ldd	r19, Y+4	; 0x04
    2832:	22 30       	cpi	r18, 0x02	; 2
    2834:	31 05       	cpc	r19, r1
    2836:	81 f0       	breq	.+32     	; 0x2858 <GPIO_setupPortDirection+0x68>
    2838:	8b 81       	ldd	r24, Y+3	; 0x03
    283a:	9c 81       	ldd	r25, Y+4	; 0x04
    283c:	83 30       	cpi	r24, 0x03	; 3
    283e:	91 05       	cpc	r25, r1
    2840:	81 f0       	breq	.+32     	; 0x2862 <GPIO_setupPortDirection+0x72>
    2842:	13 c0       	rjmp	.+38     	; 0x286a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2844:	ea e3       	ldi	r30, 0x3A	; 58
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	8a 81       	ldd	r24, Y+2	; 0x02
    284a:	80 83       	st	Z, r24
    284c:	0e c0       	rjmp	.+28     	; 0x286a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    284e:	e7 e3       	ldi	r30, 0x37	; 55
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	80 83       	st	Z, r24
    2856:	09 c0       	rjmp	.+18     	; 0x286a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2858:	e4 e3       	ldi	r30, 0x34	; 52
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	80 83       	st	Z, r24
    2860:	04 c0       	rjmp	.+8      	; 0x286a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2862:	e1 e3       	ldi	r30, 0x31	; 49
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	80 83       	st	Z, r24
			break;
		}
	}
}
    286a:	0f 90       	pop	r0
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	00 d0       	rcall	.+0      	; 0x287e <GPIO_writePort+0x6>
    287e:	00 d0       	rcall	.+0      	; 0x2880 <GPIO_writePort+0x8>
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	89 83       	std	Y+1, r24	; 0x01
    2886:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	84 30       	cpi	r24, 0x04	; 4
    288c:	90 f5       	brcc	.+100    	; 0x28f2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	28 2f       	mov	r18, r24
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	3c 83       	std	Y+4, r19	; 0x04
    2896:	2b 83       	std	Y+3, r18	; 0x03
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	81 30       	cpi	r24, 0x01	; 1
    289e:	91 05       	cpc	r25, r1
    28a0:	d1 f0       	breq	.+52     	; 0x28d6 <GPIO_writePort+0x5e>
    28a2:	2b 81       	ldd	r18, Y+3	; 0x03
    28a4:	3c 81       	ldd	r19, Y+4	; 0x04
    28a6:	22 30       	cpi	r18, 0x02	; 2
    28a8:	31 05       	cpc	r19, r1
    28aa:	2c f4       	brge	.+10     	; 0x28b6 <GPIO_writePort+0x3e>
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	61 f0       	breq	.+24     	; 0x28cc <GPIO_writePort+0x54>
    28b4:	1e c0       	rjmp	.+60     	; 0x28f2 <GPIO_writePort+0x7a>
    28b6:	2b 81       	ldd	r18, Y+3	; 0x03
    28b8:	3c 81       	ldd	r19, Y+4	; 0x04
    28ba:	22 30       	cpi	r18, 0x02	; 2
    28bc:	31 05       	cpc	r19, r1
    28be:	81 f0       	breq	.+32     	; 0x28e0 <GPIO_writePort+0x68>
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	9c 81       	ldd	r25, Y+4	; 0x04
    28c4:	83 30       	cpi	r24, 0x03	; 3
    28c6:	91 05       	cpc	r25, r1
    28c8:	81 f0       	breq	.+32     	; 0x28ea <GPIO_writePort+0x72>
    28ca:	13 c0       	rjmp	.+38     	; 0x28f2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    28cc:	eb e3       	ldi	r30, 0x3B	; 59
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	80 83       	st	Z, r24
    28d4:	0e c0       	rjmp	.+28     	; 0x28f2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    28d6:	e8 e3       	ldi	r30, 0x38	; 56
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
    28dc:	80 83       	st	Z, r24
    28de:	09 c0       	rjmp	.+18     	; 0x28f2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    28e0:	e5 e3       	ldi	r30, 0x35	; 53
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	80 83       	st	Z, r24
    28e8:	04 c0       	rjmp	.+8      	; 0x28f2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    28ea:	e2 e3       	ldi	r30, 0x32	; 50
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	8a 81       	ldd	r24, Y+2	; 0x02
    28f0:	80 83       	st	Z, r24
			break;
		}
	}
}
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	00 d0       	rcall	.+0      	; 0x2906 <GPIO_readPort+0x6>
    2906:	00 d0       	rcall	.+0      	; 0x2908 <GPIO_readPort+0x8>
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    290e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	84 30       	cpi	r24, 0x04	; 4
    2914:	90 f5       	brcc	.+100    	; 0x297a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	28 2f       	mov	r18, r24
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	3c 83       	std	Y+4, r19	; 0x04
    291e:	2b 83       	std	Y+3, r18	; 0x03
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	9c 81       	ldd	r25, Y+4	; 0x04
    2924:	81 30       	cpi	r24, 0x01	; 1
    2926:	91 05       	cpc	r25, r1
    2928:	d1 f0       	breq	.+52     	; 0x295e <GPIO_readPort+0x5e>
    292a:	2b 81       	ldd	r18, Y+3	; 0x03
    292c:	3c 81       	ldd	r19, Y+4	; 0x04
    292e:	22 30       	cpi	r18, 0x02	; 2
    2930:	31 05       	cpc	r19, r1
    2932:	2c f4       	brge	.+10     	; 0x293e <GPIO_readPort+0x3e>
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	9c 81       	ldd	r25, Y+4	; 0x04
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	61 f0       	breq	.+24     	; 0x2954 <GPIO_readPort+0x54>
    293c:	1e c0       	rjmp	.+60     	; 0x297a <GPIO_readPort+0x7a>
    293e:	2b 81       	ldd	r18, Y+3	; 0x03
    2940:	3c 81       	ldd	r19, Y+4	; 0x04
    2942:	22 30       	cpi	r18, 0x02	; 2
    2944:	31 05       	cpc	r19, r1
    2946:	81 f0       	breq	.+32     	; 0x2968 <GPIO_readPort+0x68>
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	9c 81       	ldd	r25, Y+4	; 0x04
    294c:	83 30       	cpi	r24, 0x03	; 3
    294e:	91 05       	cpc	r25, r1
    2950:	81 f0       	breq	.+32     	; 0x2972 <GPIO_readPort+0x72>
    2952:	13 c0       	rjmp	.+38     	; 0x297a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2954:	e9 e3       	ldi	r30, 0x39	; 57
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	89 83       	std	Y+1, r24	; 0x01
    295c:	0e c0       	rjmp	.+28     	; 0x297a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    295e:	e6 e3       	ldi	r30, 0x36	; 54
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	09 c0       	rjmp	.+18     	; 0x297a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2968:	e3 e3       	ldi	r30, 0x33	; 51
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	04 c0       	rjmp	.+8      	; 0x297a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2972:	e0 e3       	ldi	r30, 0x30	; 48
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    297a:	89 81       	ldd	r24, Y+1	; 0x01
}
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	cf 91       	pop	r28
    2986:	df 91       	pop	r29
    2988:	08 95       	ret

0000298a <simple_calc>:

uint8 num1 = 0, num2 = 0, oper, res = 0;

uint8 first_num = 1, second_num = 0;

uint8 simple_calc(uint8 par1, uint8 par2, uint8 oper) {
    298a:	df 93       	push	r29
    298c:	cf 93       	push	r28
    298e:	00 d0       	rcall	.+0      	; 0x2990 <simple_calc+0x6>
    2990:	00 d0       	rcall	.+0      	; 0x2992 <simple_calc+0x8>
    2992:	00 d0       	rcall	.+0      	; 0x2994 <simple_calc+0xa>
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	89 83       	std	Y+1, r24	; 0x01
    299a:	6a 83       	std	Y+2, r22	; 0x02
    299c:	4b 83       	std	Y+3, r20	; 0x03

	switch (oper) {
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	28 2f       	mov	r18, r24
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	3e 83       	std	Y+6, r19	; 0x06
    29a6:	2d 83       	std	Y+5, r18	; 0x05
    29a8:	8d 81       	ldd	r24, Y+5	; 0x05
    29aa:	9e 81       	ldd	r25, Y+6	; 0x06
    29ac:	8a 32       	cpi	r24, 0x2A	; 42
    29ae:	91 05       	cpc	r25, r1
    29b0:	11 f1       	breq	.+68     	; 0x29f6 <simple_calc+0x6c>
    29b2:	2d 81       	ldd	r18, Y+5	; 0x05
    29b4:	3e 81       	ldd	r19, Y+6	; 0x06
    29b6:	2b 32       	cpi	r18, 0x2B	; 43
    29b8:	31 05       	cpc	r19, r1
    29ba:	34 f4       	brge	.+12     	; 0x29c8 <simple_calc+0x3e>
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	9e 81       	ldd	r25, Y+6	; 0x06
    29c0:	85 32       	cpi	r24, 0x25	; 37
    29c2:	91 05       	cpc	r25, r1
    29c4:	f9 f0       	breq	.+62     	; 0x2a04 <simple_calc+0x7a>
    29c6:	2a c0       	rjmp	.+84     	; 0x2a1c <simple_calc+0x92>
    29c8:	2d 81       	ldd	r18, Y+5	; 0x05
    29ca:	3e 81       	ldd	r19, Y+6	; 0x06
    29cc:	2b 32       	cpi	r18, 0x2B	; 43
    29ce:	31 05       	cpc	r19, r1
    29d0:	31 f0       	breq	.+12     	; 0x29de <simple_calc+0x54>
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	8d 32       	cpi	r24, 0x2D	; 45
    29d8:	91 05       	cpc	r25, r1
    29da:	39 f0       	breq	.+14     	; 0x29ea <simple_calc+0x60>
    29dc:	1f c0       	rjmp	.+62     	; 0x2a1c <simple_calc+0x92>
	case '+':
		return (par1 + par2);
    29de:	99 81       	ldd	r25, Y+1	; 0x01
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	29 2f       	mov	r18, r25
    29e4:	28 0f       	add	r18, r24
    29e6:	2c 83       	std	Y+4, r18	; 0x04
    29e8:	1b c0       	rjmp	.+54     	; 0x2a20 <simple_calc+0x96>

	case '-':
		return (par1 - par2);
    29ea:	99 81       	ldd	r25, Y+1	; 0x01
    29ec:	8a 81       	ldd	r24, Y+2	; 0x02
    29ee:	39 2f       	mov	r19, r25
    29f0:	38 1b       	sub	r19, r24
    29f2:	3c 83       	std	Y+4, r19	; 0x04
    29f4:	15 c0       	rjmp	.+42     	; 0x2a20 <simple_calc+0x96>

	case '*':
		return (par1 * par2);
    29f6:	99 81       	ldd	r25, Y+1	; 0x01
    29f8:	8a 81       	ldd	r24, Y+2	; 0x02
    29fa:	98 9f       	mul	r25, r24
    29fc:	80 2d       	mov	r24, r0
    29fe:	11 24       	eor	r1, r1
    2a00:	8c 83       	std	Y+4, r24	; 0x04
    2a02:	0e c0       	rjmp	.+28     	; 0x2a20 <simple_calc+0x96>

	case '%':
		if (par2 == 0)
    2a04:	8a 81       	ldd	r24, Y+2	; 0x02
    2a06:	88 23       	and	r24, r24
    2a08:	11 f4       	brne	.+4      	; 0x2a0e <simple_calc+0x84>
			return 0;
    2a0a:	1c 82       	std	Y+4, r1	; 0x04
    2a0c:	09 c0       	rjmp	.+18     	; 0x2a20 <simple_calc+0x96>
		else
			return (par1 / par2);
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	9a 81       	ldd	r25, Y+2	; 0x02
    2a12:	69 2f       	mov	r22, r25
    2a14:	0e 94 22 17 	call	0x2e44	; 0x2e44 <__udivmodqi4>
    2a18:	8c 83       	std	Y+4, r24	; 0x04
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <simple_calc+0x96>

	default:
		return par1;
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	8c 83       	std	Y+4, r24	; 0x04
    2a20:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    2a22:	26 96       	adiw	r28, 0x06	; 6
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	08 95       	ret

00002a34 <calc_init>:

void calc_init() {
    2a34:	df 93       	push	r29
    2a36:	cf 93       	push	r28
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    2a3c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_clearScreen>
	LCD_displayString("Welcome Simple");
    2a40:	80 e6       	ldi	r24, 0x60	; 96
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "Calculator +-*/");
    2a48:	2f e6       	ldi	r18, 0x6F	; 111
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	a9 01       	movw	r20, r18
    2a52:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(2, 0, "-->Created by HA");
    2a56:	2f e7       	ldi	r18, 0x7F	; 127
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	82 e0       	ldi	r24, 0x02	; 2
    2a5c:	60 e0       	ldi	r22, 0x00	; 0
    2a5e:	a9 01       	movw	r20, r18
    2a60:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_displayStringRowColumn>
	LCD_moveCursor(3, 0);
    2a64:	83 e0       	ldi	r24, 0x03	; 3
    2a66:	60 e0       	ldi	r22, 0x00	; 0
    2a68:	0e 94 ff 10 	call	0x21fe	; 0x21fe <LCD_moveCursor>
	num1 = 0;
    2a6c:	10 92 9a 00 	sts	0x009A, r1
	num2 = 0;
    2a70:	10 92 9b 00 	sts	0x009B, r1
	oper = 0;
    2a74:	10 92 9e 00 	sts	0x009E, r1
	res = 0;
    2a78:	10 92 9c 00 	sts	0x009C, r1
	first_num = 1;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	80 93 98 00 	sts	0x0098, r24
	second_num = 0;
    2a82:	10 92 9d 00 	sts	0x009D, r1

}
    2a86:	cf 91       	pop	r28
    2a88:	df 91       	pop	r29
    2a8a:	08 95       	ret

00002a8c <main>:

int main(void) {
    2a8c:	df 93       	push	r29
    2a8e:	cf 93       	push	r28
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62
    2a94:	6f 97       	sbiw	r28, 0x1f	; 31
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
    2aa0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <LCD_init>

	calc_init();
    2aa4:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <calc_init>

	uint8 num, no_equal = 0, initial=1;
    2aa8:	1e 8e       	std	Y+30, r1	; 0x1e
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	8d 8f       	std	Y+29, r24	; 0x1d

	while (1) {

		if (no_equal == 0) {
    2aae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ab0:	88 23       	and	r24, r24
    2ab2:	09 f0       	breq	.+2      	; 0x2ab6 <main+0x2a>
    2ab4:	47 c1       	rjmp	.+654    	; 0x2d44 <main+0x2b8>
			num = KEYPAD_getPressedKey();
    2ab6:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2aba:	8f 8f       	std	Y+31, r24	; 0x1f
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	aa ef       	ldi	r26, 0xFA	; 250
    2ac2:	b3 e4       	ldi	r27, 0x43	; 67
    2ac4:	89 8f       	std	Y+25, r24	; 0x19
    2ac6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ac8:	ab 8f       	std	Y+27, r26	; 0x1b
    2aca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2acc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ace:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ad0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ad2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4a e7       	ldi	r20, 0x7A	; 122
    2ada:	53 e4       	ldi	r21, 0x43	; 67
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	8d 8b       	std	Y+21, r24	; 0x15
    2ae6:	9e 8b       	std	Y+22, r25	; 0x16
    2ae8:	af 8b       	std	Y+23, r26	; 0x17
    2aea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aec:	6d 89       	ldd	r22, Y+21	; 0x15
    2aee:	7e 89       	ldd	r23, Y+22	; 0x16
    2af0:	8f 89       	ldd	r24, Y+23	; 0x17
    2af2:	98 8d       	ldd	r25, Y+24	; 0x18
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e8       	ldi	r20, 0x80	; 128
    2afa:	5f e3       	ldi	r21, 0x3F	; 63
    2afc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b00:	88 23       	and	r24, r24
    2b02:	2c f4       	brge	.+10     	; 0x2b0e <main+0x82>
		__ticks = 1;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	9c 8b       	std	Y+20, r25	; 0x14
    2b0a:	8b 8b       	std	Y+19, r24	; 0x13
    2b0c:	3f c0       	rjmp	.+126    	; 0x2b8c <main+0x100>
	else if (__tmp > 65535)
    2b0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b10:	7e 89       	ldd	r23, Y+22	; 0x16
    2b12:	8f 89       	ldd	r24, Y+23	; 0x17
    2b14:	98 8d       	ldd	r25, Y+24	; 0x18
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	3f ef       	ldi	r19, 0xFF	; 255
    2b1a:	4f e7       	ldi	r20, 0x7F	; 127
    2b1c:	57 e4       	ldi	r21, 0x47	; 71
    2b1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b22:	18 16       	cp	r1, r24
    2b24:	4c f5       	brge	.+82     	; 0x2b78 <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b26:	69 8d       	ldd	r22, Y+25	; 0x19
    2b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e2       	ldi	r20, 0x20	; 32
    2b34:	51 e4       	ldi	r21, 0x41	; 65
    2b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	bc 01       	movw	r22, r24
    2b40:	cd 01       	movw	r24, r26
    2b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9c 8b       	std	Y+20, r25	; 0x14
    2b4c:	8b 8b       	std	Y+19, r24	; 0x13
    2b4e:	0f c0       	rjmp	.+30     	; 0x2b6e <main+0xe2>
    2b50:	89 e1       	ldi	r24, 0x19	; 25
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	9a 8b       	std	Y+18, r25	; 0x12
    2b56:	89 8b       	std	Y+17, r24	; 0x11
    2b58:	89 89       	ldd	r24, Y+17	; 0x11
    2b5a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <main+0xd0>
    2b60:	9a 8b       	std	Y+18, r25	; 0x12
    2b62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b64:	8b 89       	ldd	r24, Y+19	; 0x13
    2b66:	9c 89       	ldd	r25, Y+20	; 0x14
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	9c 8b       	std	Y+20, r25	; 0x14
    2b6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b70:	9c 89       	ldd	r25, Y+20	; 0x14
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	69 f7       	brne	.-38     	; 0x2b50 <main+0xc4>
    2b76:	14 c0       	rjmp	.+40     	; 0x2ba0 <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b78:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	9c 8b       	std	Y+20, r25	; 0x14
    2b8a:	8b 8b       	std	Y+19, r24	; 0x13
    2b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b90:	98 8b       	std	Y+16, r25	; 0x10
    2b92:	8f 87       	std	Y+15, r24	; 0x0f
    2b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b96:	98 89       	ldd	r25, Y+16	; 0x10
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <main+0x10c>
    2b9c:	98 8b       	std	Y+16, r25	; 0x10
    2b9e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);

			if ((num <= 9) && (num >= 0)) {
    2ba0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ba2:	8a 30       	cpi	r24, 0x0A	; 10
    2ba4:	d8 f5       	brcc	.+118    	; 0x2c1c <main+0x190>

				if (first_num == 1) {
    2ba6:	80 91 98 00 	lds	r24, 0x0098
    2baa:	81 30       	cpi	r24, 0x01	; 1
    2bac:	c9 f4       	brne	.+50     	; 0x2be0 <main+0x154>
//						initial=0;
//						continue;
//					}

					/*we keep taking the entered numbers and saving it into num1*/
					num1 = num1 * 10 + (num );
    2bae:	80 91 9a 00 	lds	r24, 0x009A
    2bb2:	88 2f       	mov	r24, r24
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	9c 01       	movw	r18, r24
    2bb8:	22 0f       	add	r18, r18
    2bba:	33 1f       	adc	r19, r19
    2bbc:	c9 01       	movw	r24, r18
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	82 0f       	add	r24, r18
    2bc8:	93 1f       	adc	r25, r19
    2bca:	98 2f       	mov	r25, r24
    2bcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bce:	89 0f       	add	r24, r25
    2bd0:	80 93 9a 00 	sts	0x009A, r24
					LCD_intgerToString(num);
    2bd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bd6:	88 2f       	mov	r24, r24
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <LCD_intgerToString>
    2bde:	67 cf       	rjmp	.-306    	; 0x2aae <main+0x22>
					//LCD_intgerToString(num1);
				} else if (second_num == 1) {
    2be0:	80 91 9d 00 	lds	r24, 0x009D
    2be4:	81 30       	cpi	r24, 0x01	; 1
    2be6:	09 f0       	breq	.+2      	; 0x2bea <main+0x15e>
    2be8:	62 cf       	rjmp	.-316    	; 0x2aae <main+0x22>
					/*we convert that number into int*/
					num2 = num2 * 10 + (num);
    2bea:	80 91 9b 00 	lds	r24, 0x009B
    2bee:	88 2f       	mov	r24, r24
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	9c 01       	movw	r18, r24
    2bf4:	22 0f       	add	r18, r18
    2bf6:	33 1f       	adc	r19, r19
    2bf8:	c9 01       	movw	r24, r18
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	82 0f       	add	r24, r18
    2c04:	93 1f       	adc	r25, r19
    2c06:	98 2f       	mov	r25, r24
    2c08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c0a:	89 0f       	add	r24, r25
    2c0c:	80 93 9b 00 	sts	0x009B, r24
					LCD_intgerToString(num);
    2c10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c12:	88 2f       	mov	r24, r24
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <LCD_intgerToString>
    2c1a:	49 cf       	rjmp	.-366    	; 0x2aae <main+0x22>
				}

			} else if (num == 13) {
    2c1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c1e:	8d 30       	cpi	r24, 0x0D	; 13
    2c20:	31 f4       	brne	.+12     	; 0x2c2e <main+0x1a2>
				calc_init();
    2c22:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <calc_init>
				first_num = 1;
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	80 93 98 00 	sts	0x0098, r24
    2c2c:	40 cf       	rjmp	.-384    	; 0x2aae <main+0x22>
			}

			else {
				LCD_displayCharacter(num);
    2c2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c30:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <LCD_displayCharacter>
				//LCD_intgerToString(num);


				if (num == '=' && no_equal == 0) {
    2c34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c36:	8d 33       	cpi	r24, 0x3D	; 61
    2c38:	e1 f4       	brne	.+56     	; 0x2c72 <main+0x1e6>
    2c3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c3c:	88 23       	and	r24, r24
    2c3e:	c9 f4       	brne	.+50     	; 0x2c72 <main+0x1e6>
					res = simple_calc(num1, num2, oper);
    2c40:	80 91 9a 00 	lds	r24, 0x009A
    2c44:	90 91 9b 00 	lds	r25, 0x009B
    2c48:	20 91 9e 00 	lds	r18, 0x009E
    2c4c:	69 2f       	mov	r22, r25
    2c4e:	42 2f       	mov	r20, r18
    2c50:	0e 94 c5 14 	call	0x298a	; 0x298a <simple_calc>
    2c54:	80 93 9c 00 	sts	0x009C, r24
					LCD_intgerToString(res); /* display the pressed keypad switch */
    2c58:	80 91 9c 00 	lds	r24, 0x009C
    2c5c:	88 2f       	mov	r24, r24
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <LCD_intgerToString>
					no_equal = 1;
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	8e 8f       	std	Y+30, r24	; 0x1e
					first_num = 0;
    2c68:	10 92 98 00 	sts	0x0098, r1
					second_num = 0;
    2c6c:	10 92 9d 00 	sts	0x009D, r1
    2c70:	1e cf       	rjmp	.-452    	; 0x2aae <main+0x22>
				} else if (num == '+') {
    2c72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c74:	8b 32       	cpi	r24, 0x2B	; 43
    2c76:	b9 f4       	brne	.+46     	; 0x2ca6 <main+0x21a>
					num1 = simple_calc(num1, num2, oper);
    2c78:	80 91 9a 00 	lds	r24, 0x009A
    2c7c:	90 91 9b 00 	lds	r25, 0x009B
    2c80:	20 91 9e 00 	lds	r18, 0x009E
    2c84:	69 2f       	mov	r22, r25
    2c86:	42 2f       	mov	r20, r18
    2c88:	0e 94 c5 14 	call	0x298a	; 0x298a <simple_calc>
    2c8c:	80 93 9a 00 	sts	0x009A, r24
					//	LCD_intgerToString(res); /* display the pressed keypad switch */
					oper = num;
    2c90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c92:	80 93 9e 00 	sts	0x009E, r24
					first_num = 0;
    2c96:	10 92 98 00 	sts	0x0098, r1
					second_num = 1;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	80 93 9d 00 	sts	0x009D, r24
					num2 = 0;
    2ca0:	10 92 9b 00 	sts	0x009B, r1
    2ca4:	04 cf       	rjmp	.-504    	; 0x2aae <main+0x22>
				} else if (num == '-') {
    2ca6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ca8:	8d 32       	cpi	r24, 0x2D	; 45
    2caa:	b9 f4       	brne	.+46     	; 0x2cda <main+0x24e>
					num1 = simple_calc(num1, num2, oper);
    2cac:	80 91 9a 00 	lds	r24, 0x009A
    2cb0:	90 91 9b 00 	lds	r25, 0x009B
    2cb4:	20 91 9e 00 	lds	r18, 0x009E
    2cb8:	69 2f       	mov	r22, r25
    2cba:	42 2f       	mov	r20, r18
    2cbc:	0e 94 c5 14 	call	0x298a	; 0x298a <simple_calc>
    2cc0:	80 93 9a 00 	sts	0x009A, r24
					//	LCD_intgerToString(res); /* display the pressed keypad switch */
					oper = num;
    2cc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cc6:	80 93 9e 00 	sts	0x009E, r24
					first_num = 0;
    2cca:	10 92 98 00 	sts	0x0098, r1
					second_num = 1;
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	80 93 9d 00 	sts	0x009D, r24
					num2 = 0;
    2cd4:	10 92 9b 00 	sts	0x009B, r1
    2cd8:	ea ce       	rjmp	.-556    	; 0x2aae <main+0x22>
				} else if (num == '*') {
    2cda:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cdc:	8a 32       	cpi	r24, 0x2A	; 42
    2cde:	b9 f4       	brne	.+46     	; 0x2d0e <main+0x282>
					num1 = simple_calc(num1, num2, oper);
    2ce0:	80 91 9a 00 	lds	r24, 0x009A
    2ce4:	90 91 9b 00 	lds	r25, 0x009B
    2ce8:	20 91 9e 00 	lds	r18, 0x009E
    2cec:	69 2f       	mov	r22, r25
    2cee:	42 2f       	mov	r20, r18
    2cf0:	0e 94 c5 14 	call	0x298a	; 0x298a <simple_calc>
    2cf4:	80 93 9a 00 	sts	0x009A, r24
					//LCD_intgerToString(num1); /* display the pressed keypad switch */
					oper = num;
    2cf8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cfa:	80 93 9e 00 	sts	0x009E, r24
					first_num = 0;
    2cfe:	10 92 98 00 	sts	0x0098, r1
					second_num = 1;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	80 93 9d 00 	sts	0x009D, r24
					num2 = 0;
    2d08:	10 92 9b 00 	sts	0x009B, r1
    2d0c:	d0 ce       	rjmp	.-608    	; 0x2aae <main+0x22>
				} else if (num == '%') {
    2d0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d10:	85 32       	cpi	r24, 0x25	; 37
    2d12:	09 f0       	breq	.+2      	; 0x2d16 <main+0x28a>
    2d14:	cc ce       	rjmp	.-616    	; 0x2aae <main+0x22>
					num1 = simple_calc(num1, num2, oper);
    2d16:	80 91 9a 00 	lds	r24, 0x009A
    2d1a:	90 91 9b 00 	lds	r25, 0x009B
    2d1e:	20 91 9e 00 	lds	r18, 0x009E
    2d22:	69 2f       	mov	r22, r25
    2d24:	42 2f       	mov	r20, r18
    2d26:	0e 94 c5 14 	call	0x298a	; 0x298a <simple_calc>
    2d2a:	80 93 9a 00 	sts	0x009A, r24
					//LCD_intgerToString(num1); /* display the pressed keypad switch */
					oper = num;
    2d2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d30:	80 93 9e 00 	sts	0x009E, r24
					first_num = 0;
    2d34:	10 92 98 00 	sts	0x0098, r1
					second_num = 1;
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	80 93 9d 00 	sts	0x009D, r24
					num2 = 0;
    2d3e:	10 92 9b 00 	sts	0x009B, r1
    2d42:	b5 ce       	rjmp	.-662    	; 0x2aae <main+0x22>
				}

			}
			continue;
		}
		num = KEYPAD_getPressedKey();
    2d44:	0e 94 a3 05 	call	0xb46	; 0xb46 <KEYPAD_getPressedKey>
    2d48:	8f 8f       	std	Y+31, r24	; 0x1f
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	aa ef       	ldi	r26, 0xFA	; 250
    2d50:	b3 e4       	ldi	r27, 0x43	; 67
    2d52:	8b 87       	std	Y+11, r24	; 0x0b
    2d54:	9c 87       	std	Y+12, r25	; 0x0c
    2d56:	ad 87       	std	Y+13, r26	; 0x0d
    2d58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	4a e7       	ldi	r20, 0x7A	; 122
    2d68:	53 e4       	ldi	r21, 0x43	; 67
    2d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	8f 83       	std	Y+7, r24	; 0x07
    2d74:	98 87       	std	Y+8, r25	; 0x08
    2d76:	a9 87       	std	Y+9, r26	; 0x09
    2d78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7c:	78 85       	ldd	r23, Y+8	; 0x08
    2d7e:	89 85       	ldd	r24, Y+9	; 0x09
    2d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	40 e8       	ldi	r20, 0x80	; 128
    2d88:	5f e3       	ldi	r21, 0x3F	; 63
    2d8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d8e:	88 23       	and	r24, r24
    2d90:	2c f4       	brge	.+10     	; 0x2d9c <main+0x310>
		__ticks = 1;
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	9e 83       	std	Y+6, r25	; 0x06
    2d98:	8d 83       	std	Y+5, r24	; 0x05
    2d9a:	3f c0       	rjmp	.+126    	; 0x2e1a <main+0x38e>
	else if (__tmp > 65535)
    2d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9e:	78 85       	ldd	r23, Y+8	; 0x08
    2da0:	89 85       	ldd	r24, Y+9	; 0x09
    2da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	3f ef       	ldi	r19, 0xFF	; 255
    2da8:	4f e7       	ldi	r20, 0x7F	; 127
    2daa:	57 e4       	ldi	r21, 0x47	; 71
    2dac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db0:	18 16       	cp	r1, r24
    2db2:	4c f5       	brge	.+82     	; 0x2e06 <main+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e2       	ldi	r20, 0x20	; 32
    2dc2:	51 e4       	ldi	r21, 0x41	; 65
    2dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	0f c0       	rjmp	.+30     	; 0x2dfc <main+0x370>
    2dde:	89 e1       	ldi	r24, 0x19	; 25
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	9c 83       	std	Y+4, r25	; 0x04
    2de4:	8b 83       	std	Y+3, r24	; 0x03
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <main+0x35e>
    2dee:	9c 83       	std	Y+4, r25	; 0x04
    2df0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	9e 81       	ldd	r25, Y+6	; 0x06
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	9e 83       	std	Y+6, r25	; 0x06
    2dfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	69 f7       	brne	.-38     	; 0x2dde <main+0x352>
    2e04:	14 c0       	rjmp	.+40     	; 0x2e2e <main+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e06:	6f 81       	ldd	r22, Y+7	; 0x07
    2e08:	78 85       	ldd	r23, Y+8	; 0x08
    2e0a:	89 85       	ldd	r24, Y+9	; 0x09
    2e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	9a 83       	std	Y+2, r25	; 0x02
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	9a 81       	ldd	r25, Y+2	; 0x02
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <main+0x39a>
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		if (num == 13) {
    2e2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e30:	8d 30       	cpi	r24, 0x0D	; 13
    2e32:	09 f0       	breq	.+2      	; 0x2e36 <main+0x3aa>
    2e34:	3c ce       	rjmp	.-904    	; 0x2aae <main+0x22>
			calc_init();
    2e36:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <calc_init>
			first_num = 1;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	80 93 98 00 	sts	0x0098, r24
			no_equal = 0;
    2e40:	1e 8e       	std	Y+30, r1	; 0x1e
    2e42:	35 ce       	rjmp	.-918    	; 0x2aae <main+0x22>

00002e44 <__udivmodqi4>:
    2e44:	99 1b       	sub	r25, r25
    2e46:	79 e0       	ldi	r23, 0x09	; 9
    2e48:	04 c0       	rjmp	.+8      	; 0x2e52 <__udivmodqi4_ep>

00002e4a <__udivmodqi4_loop>:
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	96 17       	cp	r25, r22
    2e4e:	08 f0       	brcs	.+2      	; 0x2e52 <__udivmodqi4_ep>
    2e50:	96 1b       	sub	r25, r22

00002e52 <__udivmodqi4_ep>:
    2e52:	88 1f       	adc	r24, r24
    2e54:	7a 95       	dec	r23
    2e56:	c9 f7       	brne	.-14     	; 0x2e4a <__udivmodqi4_loop>
    2e58:	80 95       	com	r24
    2e5a:	08 95       	ret

00002e5c <__prologue_saves__>:
    2e5c:	2f 92       	push	r2
    2e5e:	3f 92       	push	r3
    2e60:	4f 92       	push	r4
    2e62:	5f 92       	push	r5
    2e64:	6f 92       	push	r6
    2e66:	7f 92       	push	r7
    2e68:	8f 92       	push	r8
    2e6a:	9f 92       	push	r9
    2e6c:	af 92       	push	r10
    2e6e:	bf 92       	push	r11
    2e70:	cf 92       	push	r12
    2e72:	df 92       	push	r13
    2e74:	ef 92       	push	r14
    2e76:	ff 92       	push	r15
    2e78:	0f 93       	push	r16
    2e7a:	1f 93       	push	r17
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
    2e84:	ca 1b       	sub	r28, r26
    2e86:	db 0b       	sbc	r29, r27
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	de bf       	out	0x3e, r29	; 62
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	cd bf       	out	0x3d, r28	; 61
    2e92:	09 94       	ijmp

00002e94 <__epilogue_restores__>:
    2e94:	2a 88       	ldd	r2, Y+18	; 0x12
    2e96:	39 88       	ldd	r3, Y+17	; 0x11
    2e98:	48 88       	ldd	r4, Y+16	; 0x10
    2e9a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e9c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e9e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ea0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ea2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ea4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ea6:	b9 84       	ldd	r11, Y+9	; 0x09
    2ea8:	c8 84       	ldd	r12, Y+8	; 0x08
    2eaa:	df 80       	ldd	r13, Y+7	; 0x07
    2eac:	ee 80       	ldd	r14, Y+6	; 0x06
    2eae:	fd 80       	ldd	r15, Y+5	; 0x05
    2eb0:	0c 81       	ldd	r16, Y+4	; 0x04
    2eb2:	1b 81       	ldd	r17, Y+3	; 0x03
    2eb4:	aa 81       	ldd	r26, Y+2	; 0x02
    2eb6:	b9 81       	ldd	r27, Y+1	; 0x01
    2eb8:	ce 0f       	add	r28, r30
    2eba:	d1 1d       	adc	r29, r1
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	f8 94       	cli
    2ec0:	de bf       	out	0x3e, r29	; 62
    2ec2:	0f be       	out	0x3f, r0	; 63
    2ec4:	cd bf       	out	0x3d, r28	; 61
    2ec6:	ed 01       	movw	r28, r26
    2ec8:	08 95       	ret

00002eca <itoa>:
    2eca:	fb 01       	movw	r30, r22
    2ecc:	9f 01       	movw	r18, r30
    2ece:	e8 94       	clt
    2ed0:	42 30       	cpi	r20, 0x02	; 2
    2ed2:	c4 f0       	brlt	.+48     	; 0x2f04 <itoa+0x3a>
    2ed4:	45 32       	cpi	r20, 0x25	; 37
    2ed6:	b4 f4       	brge	.+44     	; 0x2f04 <itoa+0x3a>
    2ed8:	4a 30       	cpi	r20, 0x0A	; 10
    2eda:	29 f4       	brne	.+10     	; 0x2ee6 <itoa+0x1c>
    2edc:	97 fb       	bst	r25, 7
    2ede:	1e f4       	brtc	.+6      	; 0x2ee6 <itoa+0x1c>
    2ee0:	90 95       	com	r25
    2ee2:	81 95       	neg	r24
    2ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee6:	64 2f       	mov	r22, r20
    2ee8:	77 27       	eor	r23, r23
    2eea:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <__udivmodhi4>
    2eee:	80 5d       	subi	r24, 0xD0	; 208
    2ef0:	8a 33       	cpi	r24, 0x3A	; 58
    2ef2:	0c f0       	brlt	.+2      	; 0x2ef6 <itoa+0x2c>
    2ef4:	89 5d       	subi	r24, 0xD9	; 217
    2ef6:	81 93       	st	Z+, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	00 97       	sbiw	r24, 0x00	; 0
    2efc:	a1 f7       	brne	.-24     	; 0x2ee6 <itoa+0x1c>
    2efe:	16 f4       	brtc	.+4      	; 0x2f04 <itoa+0x3a>
    2f00:	5d e2       	ldi	r21, 0x2D	; 45
    2f02:	51 93       	st	Z+, r21
    2f04:	10 82       	st	Z, r1
    2f06:	c9 01       	movw	r24, r18
    2f08:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <strrev>

00002f0c <strrev>:
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	fc 01       	movw	r30, r24
    2f10:	67 2f       	mov	r22, r23
    2f12:	71 91       	ld	r23, Z+
    2f14:	77 23       	and	r23, r23
    2f16:	e1 f7       	brne	.-8      	; 0x2f10 <strrev+0x4>
    2f18:	32 97       	sbiw	r30, 0x02	; 2
    2f1a:	04 c0       	rjmp	.+8      	; 0x2f24 <strrev+0x18>
    2f1c:	7c 91       	ld	r23, X
    2f1e:	6d 93       	st	X+, r22
    2f20:	70 83       	st	Z, r23
    2f22:	62 91       	ld	r22, -Z
    2f24:	ae 17       	cp	r26, r30
    2f26:	bf 07       	cpc	r27, r31
    2f28:	c8 f3       	brcs	.-14     	; 0x2f1c <strrev+0x10>
    2f2a:	08 95       	ret

00002f2c <__udivmodhi4>:
    2f2c:	aa 1b       	sub	r26, r26
    2f2e:	bb 1b       	sub	r27, r27
    2f30:	51 e1       	ldi	r21, 0x11	; 17
    2f32:	07 c0       	rjmp	.+14     	; 0x2f42 <__udivmodhi4_ep>

00002f34 <__udivmodhi4_loop>:
    2f34:	aa 1f       	adc	r26, r26
    2f36:	bb 1f       	adc	r27, r27
    2f38:	a6 17       	cp	r26, r22
    2f3a:	b7 07       	cpc	r27, r23
    2f3c:	10 f0       	brcs	.+4      	; 0x2f42 <__udivmodhi4_ep>
    2f3e:	a6 1b       	sub	r26, r22
    2f40:	b7 0b       	sbc	r27, r23

00002f42 <__udivmodhi4_ep>:
    2f42:	88 1f       	adc	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	5a 95       	dec	r21
    2f48:	a9 f7       	brne	.-22     	; 0x2f34 <__udivmodhi4_loop>
    2f4a:	80 95       	com	r24
    2f4c:	90 95       	com	r25
    2f4e:	bc 01       	movw	r22, r24
    2f50:	cd 01       	movw	r24, r26
    2f52:	08 95       	ret

00002f54 <_exit>:
    2f54:	f8 94       	cli

00002f56 <__stop_program>:
    2f56:	ff cf       	rjmp	.-2      	; 0x2f56 <__stop_program>
